/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch; var util = require("util");
























var cdnManagementUtil = require("./cdnmanagement.utils");
var profile = require("../../../util/profile");
var utils = require("../../../util/utils");
var tagUtils = require("../tag/tagUtils");

var $ = utils.getLocaleString;

exports.init = function(cli) {
  var log = cli.output;

  var cdn = cli.category("cdn").description($("Commands to manage Azure Content Delivery Network (CDN)"));




  var profiles = cdn.category("profile").description($("Commands to manage your Azure cdn profiles"));



  profiles.command("list").description($("List all profiles under the current subscription")).usage("[options] [resource-group]").option("-g, --resource-group [resource-group]", $("Name of the Resource Group")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __1(options, _) { var subscription, client, operation, progress, result; var __frame = { name: "__1", line: 50 }; return __func(_, this, arguments, __1, 1, __frame, function __$__1() {









      subscription = profile.current.getSubscription(options.subscription);
      client = utils.createCdnManagementClient(subscription); return (function __$__1(__then) {


        if (options.resourceGroup) {
          return client.profiles.listByResourceGroup(options.resourceGroup, __cb(_, __frame, 10, 36, function ___(__0, __1) { operation = __1; __then(); }, true)); } else {

          return client.profiles.listBySubscriptionId(__cb(_, __frame, 12, 36, function ___(__0, __2) { operation = __2; __then(); }, true)); } ; })(function __$__1() {


        progress = cli.interaction.progress(util.format($("Listing Cdn profile(s)"))); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() {


              result = operation; _(null, null, true); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__1() {

                progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__1() {


            cli.interaction.formatOutput(result, function() {
              if ((!result || (result.length === 0))) {
                log.info($("No profiles found.")); }
               else {
                log.table(result, function(row, profile) {
                  row.cell($("Name"), profile.name);
                  row.cell($("ResourceGroup"), cdnManagementUtil.getResourceGroupFromProfileId(profile.id));
                  row.cell($("Location"), profile.location);
                  row.cell($("Tags"), tagUtils.getTagsInfo(profile.tags));
                  row.cell($("ProvisioningState"), profile.provisioningState);
                  row.cell($("ResourceState"), profile.resourceState);
                  row.cell($("Sku"), profile.sku.name);
                  row.cell($("Subscription"), subscription.id); }); } ; }); _(); }); }); }); }); });






  profiles.command("show <name> <resource-group>").description($("Show the infomation of a specific cdn profile")).usage("[options] <name> <resource-group>").option("-n, --name [name]", $("Name of the Cdn Profile")).option("-g, --resource-group [resource-group]", $("Name of the Resource Group")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __2(name, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__2", line: 98 }; return __func(_, this, arguments, __2, 3, __frame, function __$__2() {










      options.name = (options.name || name);
      options.resourceGroup = (options.resourceGroup || resourceGroup);

      if (!options.name) {
        return _(null, cli.missingArgument("profile-name")); } else {
        if (!options.resourceGroup) {
          return _(null, cli.missingArgument("resource-group")); } ; } ;





      subscription = profile.current.getSubscription(options.subscription);
      client = utils.createCdnManagementClient(subscription);

      progress = cli.interaction.progress(util.format($("Get cdn profile %s ..."), options.name));

      callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() {


                  return client.profiles.get(options.name, options.resourceGroup, __cb(_, __frame, 25, 39, function ___(__0, __1) { callbackArgs = __1;
                    result = callbackArgs[0];
                    response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__2() { if (e) {

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__2() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__2() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__2() {


          cli.interaction.formatOutput(result, function(data) {
            if (!data) {
              log.info($("No profile named %s found."), options.name); }
             else {
              log.data("");
              log.data($("Profile name :"), result.name);
              log.data("");
              log.data($("Resource Group     :"), options.resourceGroup);
              log.data($("Location           :"), result.location);
              log.data($("ResourceState      :"), result.resourceState);
              log.data($("ProvisioningState  :"), result.provisioningState);
              log.data($("Sku                :"), result.sku.name);
              log.data($("Tags               :"), tagUtils.getTagsInfo(result.tags));
              log.data($("Id                 :"), result.id);
              log.data(""); } ; }); _(); }); }); }); });





  profiles.command("create <name> <resource-group> <location> <sku-name>").description($("Create a profile under given resource group and subscription")).usage("[options] <name> <resource-group> <location> <sku-name> [tags]").option("-n, --name <name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile will be created in")).option("-l, --location <location>", $("The location in which to create the Cdn Profile")).option("-k, --sku-name <sku-name>", $("The pricing sku name of the Azure Cdn Profile")).option("-t, --tags [tags]", $(("Tags to set to the profile. Can be multiple. " + "In the format of 'name=value'. Name is required and value is optional."))).option("--subscription <subscription>", $("the subscription identifier")).execute(function __3(name, resourceGroup, location, skuName, options, _) { var tags, subscription, client, creationParameter, progress, callbackArgs, result, response; var __frame = { name: "__3", line: 162 }; return __func(_, this, arguments, __3, 5, __frame, function __$__3() {















      log.verbose(("arguments: " + JSON.stringify({
        profileName: name,
        options: options })));


      options.name = (options.name || name);
      options.resourceGroup = (options.resourceGroup || resourceGroup);
      options.location = (options.location || location);
      options.skuName = (options.skuName || skuName);

      if (!options.name) {
        return _(null, cli.missingArgument("name")); } else {
        if (!options.resourceGroup) {
          return _(null, cli.missingArgument("resource-group")); } else {
          if (!options.location) {
            return _(null, cli.missingArgument("location")); } else {
            if (!options.skuName) {
              return _(null, cli.missingArgument("sku-name")); } ; } ; } ; } ;


      tags = { };
      tags = tagUtils.buildTagsParameter(tags, options);





      subscription = profile.current.getSubscription(options.subscription);
      client = utils.createCdnManagementClient(subscription);




      creationParameter = {
        location: options.location,
        sku: {
          name: options.skuName },

        tags: tags };


      progress = cli.interaction.progress(util.format($("Attempting to create cdn profile %s ..."), options.name));

      callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__3() {


                  return client.profiles.create(options.name, creationParameter, options.resourceGroup, __cb(_, __frame, 52, 39, function ___(__0, __1) { callbackArgs = __1;
                    result = callbackArgs[0];
                    response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__3() { if (e) {

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__3() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__3() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__3() {


          cli.interaction.formatOutput(result, function(data) {
            if (!data) {
              log.info($("No profile information available")); }
             else {
              log.data("");
              log.data($("Profile name :"), result.name);
              log.data("");
              log.data($("Resource Group     :"), options.resourceGroup);
              log.data($("Location           :"), result.location);
              log.data($("ResourceState      :"), result.resourceState);
              log.data($("ProvisioningState  :"), result.provisioningState);
              log.data($("Sku                :"), result.sku.name);
              log.data($("Tags               :"), tagUtils.getTagsInfo(result.tags));
              log.data($("Id                 :"), result.id);
              log.data(""); } ; });



          if ((response.statusCode == 200)) {
            log.info((("Cdn profile " + options.name) + " is getting created...")); }
           else {
            log.info(("Failed in creating profile " + options.name)); } ; _(); }); }); }); });




  profiles.command("delete [name] [resource-group]").description($("Delete a profile under given resource group and subscription")).usage("[options] <profile-name> <resource-group>").option("-n, --name <name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile will be delete in")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __4(name, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__4", line: 255 }; return __func(_, this, arguments, __4, 3, __frame, function __$__4() {











      log.verbose(("arguments: " + JSON.stringify({
        profileName: name,
        options: options })));


      options.name = (options.name || name);
      options.resourceGroup = (options.resourceGroup || resourceGroup);

      if (!options.name) {
        return _(null, cli.missingArgument("name")); } else {
        if (!options.resourceGroup) {
          return _(null, cli.missingArgument("resource-group")); } ; } ;






      subscription = profile.current.getSubscription();
      client = utils.createCdnManagementClient(subscription);





      progress = cli.interaction.progress(util.format($("Deleting Cdn Profile %s"), options.name));
      callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__4() {


            return client.profiles.deleteIfExists(options.name, options.resourceGroup, __cb(_, __frame, 35, 39, function ___(__0, __1) { callbackArgs = __1;
              result = callbackArgs[0];
              response = callbackArgs[2]; _(null, null, true); }, true, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__4() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__4() {


          if ((response.statusCode == 200)) {
            log.info(("Delete command successfully invoked for Cdn Profile " + options.name)); } else {
            if ((response.statusCode == 204)) {
              log.info((("Delete sucess, but no profile named " + options.name) + " was found")); }
             else {
              log.info(("Error in deleting profile " + options.name)); } ; } ; _(); }); }); }); });




  profiles.command("set <name> <resource-group>").description($("Update a profile's tags")).usage("[options] <name> <resource-group> [tags]").option("-n, --name <name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile will be created in")).option("-t, --tags [tags]", $(("Tags to set to the profile. Can be multiple. " + "In the format of 'name=value'. Name is required and value is optional."))).option("--subscription <subscription>", $("the subscription identifier")).execute(function __5(name, resourceGroup, options, _) { var tags, subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__5", line: 315 }; return __func(_, this, arguments, __5, 3, __frame, function __$__5() {












      log.verbose(("arguments: " + JSON.stringify({
        profileName: name,
        options: options })));


      options.name = (options.name || name);
      options.resourceGroup = (options.resourceGroup || resourceGroup);

      if (!options.name) {
        return _(null, cli.missingArgument("name")); } else {
        if (!options.resourceGroup) {
          return _(null, cli.missingArgument("resource-group")); } ; } ;


      tags = { };
      tags = tagUtils.buildTagsParameter(tags, options);





      subscription = profile.current.getSubscription(options.subscription);
      client = utils.createCdnManagementClient(subscription);

      progress = cli.interaction.progress(util.format($("Attempting to update tags for cdn profile %s ..."), options.name));

      callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__5() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__5() {


                  return client.profiles.update(options.name, options.resourceGroup, tags, __cb(_, __frame, 34, 39, function ___(__0, __1) { callbackArgs = __1;
                    result = callbackArgs[0];
                    response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__5() { if (e) {

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__5() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__5() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__5() {


          cli.interaction.formatOutput(result, function(data) {
            if (!data) {
              log.info($("No profile information available")); }
             else {
              log.data("");
              log.data($("Profile name :"), result.name);
              log.data("");
              log.data($("Resource Group     :"), options.resourceGroup);
              log.data($("Location           :"), result.location);
              log.data($("ResourceState      :"), result.resourceState);
              log.data($("ProvisioningState  :"), result.provisioningState);
              log.data($("Sku                :"), result.sku.name);
              log.data($("Tags               :"), tagUtils.getTagsInfo(result.tags));
              log.data($("Id                 :"), result.id);
              log.data(""); } ; });



          if ((response.statusCode == 202)) {
            log.info(("Successfully updated tags of profile " + options.name)); }
           else {
            log.info(("Failed in updating tags of profile " + options.name)); } ; _(); }); }); }); });





  var ssoUri = cdn.category("ssouri").description($("Commands to generate sso uri of your Azure cdn profiles"));



  ssoUri.command("create <profile-name> <resource-group>").description($("Create sso uri of the profile")).usage("[options] <profile-name> <resource-group>").option("-n, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __6(profileName, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__6", line: 395 }; return __func(_, this, arguments, __6, 3, __frame, function __$__6() {











      log.verbose(("arguments: " + JSON.stringify({
        profileName: profileName,
        options: options })));


      options.profileName = (options.profileName || profileName);
      options.resourceGroup = (options.resourceGroup || resourceGroup);

      if (!options.profileName) {
        return _(null, cli.missingArgument("profile-name")); } else {
        if (!options.resourceGroup) {
          return _(null, cli.missingArgument("resource-group")); } ; } ;






      subscription = profile.current.getSubscription();
      client = utils.createCdnManagementClient(subscription);

      progress = cli.interaction.progress(util.format($("Generating Cdn profile(s) sso uri")));

      callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__6() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__6() {


                  return client.profiles.generateSsoUri(options.profileName, options.resourceGroup, __cb(_, __frame, 32, 39, function ___(__0, __1) { callbackArgs = __1;
                    result = callbackArgs[0];
                    response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__6() { if (e) {

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__6() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__6() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__6() {


          log.info($(((("Sso uri of profile " + options.profileName) + " is:\n ") + result.ssoUriValue))); _(); }); }); }); });




  var endpoint = cdn.category("endpoint").description($("Commands to manage Azure cdn profile endpoints"));



  endpoint.command("list <profile-name> <resource-group>").description($("List endpoints by profile and resource group")).usage("[options] <profile-name> <resource-group>").option("-n, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __7(profileName, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__7", line: 451 }; return __func(_, this, arguments, __7, 3, __frame, function __$__7() {










      log.verbose(("arguments: " + JSON.stringify({
        profileName: profileName,
        options: options })));


      options.profileName = (options.profileName || profileName);
      options.resourceGroup = (options.resourceGroup || resourceGroup);

      if (!options.profileName) {
        return _(null, cli.missingArgument("profile-name")); } else {
        if (!options.resourceGroup) {
          return _(null, cli.missingArgument("resource-group")); } ; } ;






      subscription = profile.current.getSubscription();
      client = utils.createCdnManagementClient(subscription);

      progress = cli.interaction.progress(util.format($("Listing endpoints...")));

      callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__7() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__7() {


                  return client.endpoints.listByProfile(options.profileName, options.resourceGroup, __cb(_, __frame, 31, 40, function ___(__0, __1) { callbackArgs = __1;
                    result = callbackArgs[0];
                    response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__7() { if (e) {

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__7() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__7() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__7() {


          cli.interaction.formatOutput(result, function() {
            if ((!result || (result.length === 0))) {
              log.info($("No endpoints found.")); }
             else {
              log.table(result, function(row, endpoint) {
                row.cell($("Name"), endpoint.name);
                row.cell($("ProfileName"), options.profileName);
                row.cell($("ResourceGroup"), options.resourceGroup);
                row.cell($("Subscription"), subscription.id);
                row.cell($("Location"), endpoint.location);
                row.cell($("Tags"), tagUtils.getTagsInfo(endpoint.tags)); }); } ; }); _(); }); }); }); });






  endpoint.command("show <name> <profile-name> <resource-group>").description($("Get endpoint by endpoint name, profile name, and resource group")).usage("[options] <name> <profile-name> <resource-group>").option("-n, --name <name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __8(name, profileName, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__8", line: 515 }; return __func(_, this, arguments, __8, 4, __frame, function __$__8() {











      log.verbose(("arguments: " + JSON.stringify({
        profileName: profileName,
        options: options })));


      options.name = (options.name || name);
      options.profileName = (options.profileName || profileName);
      options.resourceGroup = (options.resourceGroup || resourceGroup);

      if (!options.name) {
        return _(null, cli.missingArgument("name")); } else {
        if (!options.profileName) {
          return _(null, cli.missingArgument("profile-name")); } else {
          if (!options.resourceGroup) {
            return _(null, cli.missingArgument("resource-group")); } ; } ; } ;






      subscription = profile.current.getSubscription();
      client = utils.createCdnManagementClient(subscription);

      progress = cli.interaction.progress(util.format($(("Getting endpoint named " + options.name))));

      callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__8() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__8() {


                  return client.endpoints.get(options.name, options.profileName, options.resourceGroup, __cb(_, __frame, 34, 40, function ___(__0, __1) { callbackArgs = __1;
                    result = callbackArgs[0];
                    response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__8() { if (e) {

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__8() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__8() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__8() {


          cli.interaction.formatOutput(result, function(data) {
            if (!data) {
              log.info($("No endpoint named %s found."), options.profileName); }
             else {
              log.data("");
              log.data($("Endpoint name                  :"), result.name);
              log.data("");
              log.data($("Profile name                   :"), options.profileName);
              log.data($("Resource Group                 :"), options.resourceGroup);
              log.data($("Location                       :"), result.location);
              log.data($("Tags                           :"), tagUtils.getTagsInfo(result.tags));
              log.data($("Host Name                      :"), result.hostName);
              log.data($("Origin Host Header             :"), result.originHostHeader);
              log.data($("Origin Path                    :"), result.originPath);
              log.data($("Content Types To Compress      :"), result.contentTypesToCompress.join(","));
              log.data($("Is Compression Enabled         :"), result.isCompressionEnabled);
              log.data($("Is Http Allowed                :"), result.isHttpAllowed);
              log.data($("Is Https Allowed               :"), result.isHttpsAllowed);
              log.data($("Query String Caching Behavior  :"), result.queryStringCachingBehavior);
              log.data($("Origin Names                   :"), cdnManagementUtil.getOriginNamesString(result.origins));
              log.data($("Resource State                 :"), result.resourceState);
              log.data($("Provisioning State             :"), result.provisioningState);
              log.data(""); } ; }); _(); }); }); }); });





  endpoint.command("create <name> <profile-name> <resource-group> <location> <origin-name> <origin-host-name>").description($("Create endpoint with given name and properties.")).usage("[options] <name> <profile-name> <resource-group> <location> <origin-name> <origin-host-name> [origin-host-header] [origin-path] [content-type-to-compress] [is-compression-enabled] [is-http-allowed] [is-https-allowed] [query-string-caching-behavior]  [http-port] [https-port] [tags]").option("-n, --name <name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("-l, --location <location>", $("The location of the Cdn endpoint")).option("-o, --origin-name <origin-name>", $("The name of the origin used to identify the origin")).option("-r, --origin-host-name <origin-host-name>", $("The host name of the origin")).option("-e, --origin-host-header [origin-host-header]", $("The origin host header of the Azure Cdn Endpoint")).option("-i, --origin-path [origin-path]", $("The origin path Azure Cdn Endpoint")).option("-c, --content-types-to-compress [content-types-to-compress]", $("The list of mime types that need to be compressed by Cdn edge nodes")).option("-d, --is-compression-enabled [is-compression-enabled]", $("Is the compression enabled for the Cdn. Valid input: -d [true|false]")).option("-w, --is-http-allowed [is-http-allowed]", $("Is the http traffic allowed for the Cdn. Valid input: -w [true|false]")).option("-a, --is-https-allowed [is-https-allowed]", $("Is the https traffic allowed for the Cdn. Valid input: -a [true|false]")).option("-q, --query-string-caching-behavior [query-string-caching-behavior]", $("The way Cdn handles requests with query string")).option("-u, --http-port [http-port]", $("The port http traffic used on the origin server")).option("-w, --https-port [https-port]", $("The port https traffic used on the origin server")).option("-t, --tags [tags]", $("The tags to associate with the Azure Cdn Endpoint")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __9(name, profileName, resourceGroup, location, originName, originHostName, options, _) { var subscription, client, tags, contentTypesToCompress, endpointCreateParameters, progress, callbackArgs, result, response; var __frame = { name: "__9", line: 606 }; return __func(_, this, arguments, __9, 7, __frame, function __$__9() {
























      log.verbose(("arguments: " + JSON.stringify({
        profileName: profileName,
        options: options })));


      options.name = (options.name || name);
      options.profileName = (options.profileName || profileName);
      options.resourceGroup = (options.resourceGroup || resourceGroup);
      options.location = (options.location || location);
      options.originName = (options.originName || originName);
      options.originHostName = (options.originHostName || originHostName);

      if (!options.name) {
        return _(null, cli.missingArgument("name")); } else {
        if (!options.profileName) {
          return _(null, cli.missingArgument("profile-name")); } else {
          if (!options.resourceGroup) {
            return _(null, cli.missingArgument("resource-group")); } else {
            if (!options.location) {
              return _(null, cli.missingArgument("location")); } else {
              if (!options.originName) {
                return _(null, cli.missingArgument("origin-name")); } else {
                if (!options.originHostName) {
                  return _(null, cli.missingArgument("origin-host-name")); } ; } ; } ; } ; } ; } ;






      subscription = profile.current.getSubscription();
      client = utils.createCdnManagementClient(subscription);

      tags = { };
      tags = tagUtils.buildTagsParameter(tags, options);

      contentTypesToCompress = (options.contentTypesToCompress ? options.contentTypesToCompress.split(",") : []);

      endpointCreateParameters = {
        contentTypesToCompress: contentTypesToCompress,
        location: options.location,
        originHostHeader: options.originHostHeader,
        originPath: options.originPath,
        origins: [{
          name: originName,
          hostName: originHostName,
          httpPort: options.httpPort,
          httpsPort: options.httpsPort },],

        queryStringCachingBehavior: options.queryStringCachingBehavior,
        tags: tags };


      if (options.isCompressionEnabled) {
        endpointCreateParameters.isCompressionEnabled = cdnManagementUtil.getBooleanFromString(options.isCompressionEnabled); } ;

      if (options.isHttpAllowed) {
        endpointCreateParameters.isHttpAllowed = cdnManagementUtil.getBooleanFromString(options.isHttpAllowed); } ;

      if (options.isHttpsAllowed) {
        endpointCreateParameters.isHttpsAllowed = cdnManagementUtil.getBooleanFromString(options.isHttpsAllowed); } ;



      progress = cli.interaction.progress(util.format($(("Creating endpoint named " + options.name))));

      callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__9() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__9() {


                  return client.endpoints.create(options.name, endpointCreateParameters, options.profileName, options.resourceGroup, __cb(_, __frame, 74, 40, function ___(__0, __1) { callbackArgs = __1;
                    result = callbackArgs[0];
                    response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__9() { if (e) {

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__9() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__9() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__9() {


          cli.interaction.formatOutput(result, function(data) {
            if (!data) {
              log.info($("Error creating endpoint %s.")); }
             else {
              log.data("");
              log.data($("Endpoint name                  :"), result.name);
              log.data("");
              log.data($("Profile name                   :"), options.profileName);
              log.data($("Resource Group                 :"), options.resourceGroup);
              log.data($("Location                       :"), result.location);
              log.data($("Tags                           :"), tagUtils.getTagsInfo(result.tags));
              log.data($("Host Name                      :"), result.hostName);
              log.data($("Origin Host Header             :"), result.originHostHeader);
              log.data($("Origin Path                    :"), result.originPath);
              log.data($("Content Types To Compress      :"), result.contentTypesToCompress.join(","));
              log.data($("Is Compression Enabled         :"), result.isCompressionEnabled);
              log.data($("Is Http Allowed                :"), result.isHttpAllowed);
              log.data($("Is Https Allowed               :"), result.isHttpsAllowed);
              log.data($("Query String Caching Behavior  :"), result.queryStringCachingBehavior);
              log.data($("Origin Names                   :"), cdnManagementUtil.getOriginNamesString(result.origins));
              log.data($("Resource State                 :"), result.resourceState);
              log.data($("Provisioning State             :"), result.provisioningState);
              log.data(""); } ; }); _(); }); }); }); });





  endpoint.command("set <name> <profile-name> <resource-group>").description($("Update endpoint with given properties.")).usage("[options] <name> <profile-name> <resource-group> [origin-host-header] [origin-path] [content-type-to-compress] [is-compression-enabled] [is-http-allowed] [is-https-allowed] [query-string-caching-behavior] [tags]").option("-n, --name <name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("-e, --origin-host-header [origin-host-header]", $("The origin host header of the Azure Cdn Endpoint")).option("-i, --origin-path [origin-path]", $("The origin path Azure Cdn Endpoint")).option("-c, --content-types-to-compress [content-types-to-compress]", $("The list of mime types that need to be compressed by Cdn edge nodes")).option("-d, --is-compression-enabled [is-compression-enabled]", $("Is the compression enabled for the Cdn. Valid input: -d [true|false]")).option("-u, --is-http-allowed [is-http-allowed]", $("Is the http traffic allowed for the Cdn. Valid input: -u [true|false]")).option("-w, --is-https-allowed [is-https-allowed]", $("Is the https traffic allowed for the Cdn. Valid input: -w [true|false]")).option("-q, --query-string-caching-behavior [query-string-caching-behavior]", $("The way Cdn handles requests with query string")).option("-t, --tags [tags]", $("The tags to associate with the Azure Cdn Endpoint")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __10(name, profileName, resourceGroup, options, _) { var subscription, client, endpointUpdateParameters, tags, progress, callbackArgs, result, response; var __frame = { name: "__10", line: 732 }; return __func(_, this, arguments, __10, 4, __frame, function __$__10() {



















      log.verbose(("arguments: " + JSON.stringify({
        profileName: profileName,
        options: options })));


      options.name = (options.name || name);
      options.profileName = (options.profileName || profileName);
      options.resourceGroup = (options.resourceGroup || resourceGroup);

      if (!options.name) {
        return _(null, cli.missingArgument("name")); } else {
        if (!options.profileName) {
          return _(null, cli.missingArgument("profile-name")); } else {
          if (!options.resourceGroup) {
            return _(null, cli.missingArgument("resource-group")); } ; } ; } ;






      subscription = profile.current.getSubscription();
      client = utils.createCdnManagementClient(subscription);




      endpointUpdateParameters = { };

      if (options.originHostHeader) {
        endpointUpdateParameters.originHostHeader = options.originHostHeader; } ;

      if (options.originPath) {
        endpointUpdateParameters.originPath = options.originPath; } ;

      if (options.isCompressionEnabled) {
        endpointUpdateParameters.isCompressionEnabled = cdnManagementUtil.getBooleanFromString(options.isCompressionEnabled); } ;

      if (options.contentTypesToCompress) {
        endpointUpdateParameters.contentTypesToCompress = options.contentTypesToCompress.split(","); } ;

      if (options.isHttpAllowed) {
        endpointUpdateParameters.isHttpAllowed = cdnManagementUtil.getBooleanFromString(options.isHttpAllowed); } ;

      if (options.isHttpsAllowed) {
        endpointUpdateParameters.isHttpsAllowed = cdnManagementUtil.getBooleanFromString(options.isHttpsAllowed); } ;

      if (options.queryStringCachingBehavior) {
        endpointUpdateParameters.queryStringCachingBehavior = options.queryStringCachingBehavior; } ;

      if (options.tags) {
        tags = { };
        tags = tagUtils.buildTagsParameter(tags, options);
        endpointUpdateParameters.tags = tags; } ;



      progress = cli.interaction.progress(util.format($(("Updating endpoint named " + options.name))));

      callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__10() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__10() {


                  return client.endpoints.update(options.name, endpointUpdateParameters, options.profileName, options.resourceGroup, __cb(_, __frame, 67, 40, function ___(__0, __1) { callbackArgs = __1;
                    result = callbackArgs[0];
                    response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__10() { if (e) {

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__10() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__10() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__10() {




          cli.interaction.formatOutput(result, function(data) {
            if (!data) {
              log.info($("Error updating endpoint %s.")); }
             else {
              log.data("");
              log.data($("Endpoint name                  :"), result.name);
              log.data("");
              log.data($("Profile name                   :"), options.profileName);
              log.data($("Resource Group                 :"), options.resourceGroup);
              log.data($("Location                       :"), result.location);
              log.data($("Tags                           :"), tagUtils.getTagsInfo(result.tags));
              log.data($("Host Name                      :"), result.hostName);
              log.data($("Origin Host Header             :"), result.originHostHeader);
              log.data($("Origin Path                    :"), result.originPath);
              log.data($("Content Types To Compress      :"), result.contentTypesToCompress.join(","));
              log.data($("Is Compression Enabled         :"), result.isCompressionEnabled);
              log.data($("Is Http Allowed                :"), result.isHttpAllowed);
              log.data($("Is Https Allowed               :"), result.isHttpsAllowed);
              log.data($("Query String Caching Behavior  :"), result.queryStringCachingBehavior);
              log.data($("Origin Names                   :"), cdnManagementUtil.getOriginNamesString(result.origins));
              log.data($("Resource State                 :"), result.resourceState);
              log.data($("Provisioning State             :"), result.provisioningState);
              log.data(""); } ; }); _(); }); }); }); });






  endpoint.command("delete <name> <profile-name> <resource-group>").description($("Delete an endpoint by endpoint name, profile name, and resource group")).usage("[options] <ename> <profile-name> <resource-group>").option("-n, --name <name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __11(name, profileName, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__11", line: 846 }; return __func(_, this, arguments, __11, 4, __frame, function __$__11() {











      log.verbose(("arguments: " + JSON.stringify({
        profileName: profileName,
        options: options })));


      options.name = (options.name || name);
      options.profileName = (options.profileName || profileName);
      options.resourceGroup = (options.resourceGroup || resourceGroup);

      if (!options.name) {
        return _(null, cli.missingArgument("name")); } else {
        if (!options.profileName) {
          return _(null, cli.missingArgument("profile-name")); } else {
          if (!options.resourceGroup) {
            return _(null, cli.missingArgument("resource-group")); } ; } ; } ;






      subscription = profile.current.getSubscription();
      client = utils.createCdnManagementClient(subscription);

      progress = cli.interaction.progress(util.format($(("Deleting endpoint named " + options.name))));

      callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__11() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__11() {


                  return client.endpoints.deleteIfExists(options.name, options.profileName, options.resourceGroup, __cb(_, __frame, 34, 40, function ___(__0, __1) { callbackArgs = __1;
                    result = callbackArgs[0];
                    response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__11() { if (e) {

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__11() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__11() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__11() {


          if ((response.statusCode == 200)) {
            log.info(("Delete command successfully invoked for endpoint " + options.name)); } else {
            if ((response.statusCode == 204)) {
              log.info((("Delete sucess, but no endpoint named " + options.name) + " was found")); }
             else {
              log.info(("Error in deleting endpoint " + options.name)); } ; } ; _(); }); }); }); });




  endpoint.command("start <name> <profile-name> <resource-group>").description($("Start an endpoint by endpoint name, profile name, and resource group")).usage("[options] <name> <profile-name> <resource-group>").option("-n, --name <name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __12(name, profileName, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__12", line: 906 }; return __func(_, this, arguments, __12, 4, __frame, function __$__12() {











      log.verbose(("arguments: " + JSON.stringify({
        profileName: profileName,
        options: options })));


      options.name = (options.name || name);
      options.profileName = (options.profileName || profileName);
      options.resourceGroup = (options.resourceGroup || resourceGroup);

      if (!options.name) {
        return _(null, cli.missingArgument("name")); } else {
        if (!options.profileName) {
          return _(null, cli.missingArgument("profile-name")); } else {
          if (!options.resourceGroup) {
            return _(null, cli.missingArgument("resource-group")); } ; } ; } ;






      subscription = profile.current.getSubscription();
      client = utils.createCdnManagementClient(subscription);

      progress = cli.interaction.progress(util.format($(("Starting endpoint named " + options.name))));

      callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__12() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__12() {


                  return client.endpoints.start(options.name, options.profileName, options.resourceGroup, __cb(_, __frame, 34, 40, function ___(__0, __1) { callbackArgs = __1;
                    result = callbackArgs[0];
                    response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__12() { if (e) {

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__12() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__12() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__12() {


          if ((response.statusCode == 200)) {
            log.info((("Command successfully invoked for endpoint " + options.name) + " and it is now running")); }
           else {
            log.info(("Error in starting endpoint " + options.name)); } ; _(); }); }); }); });




  endpoint.command("stop <name> <profile-name> <resource-group>").description($("Stop an endpoint by endpoint name, profile name, and resource group")).usage("[options] <name> <profile-name> <resource-group>").option("-n, --name <name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __13(name, profileName, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__13", line: 964 }; return __func(_, this, arguments, __13, 4, __frame, function __$__13() {











      log.verbose(("arguments: " + JSON.stringify({
        profileName: profileName,
        options: options })));


      options.name = (options.name || name);
      options.profileName = (options.profileName || profileName);
      options.resourceGroup = (options.resourceGroup || resourceGroup);

      if (!options.name) {
        return _(null, cli.missingArgument("name")); } else {
        if (!options.profileName) {
          return _(null, cli.missingArgument("profile-name")); } else {
          if (!options.resourceGroup) {
            return _(null, cli.missingArgument("resource-group")); } ; } ; } ;






      subscription = profile.current.getSubscription();
      client = utils.createCdnManagementClient(subscription);

      progress = cli.interaction.progress(util.format($(("Stopping endpoint named " + options.name))));

      callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__13() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__13() {


                  return client.endpoints.stop(options.name, options.profileName, options.resourceGroup, __cb(_, __frame, 34, 40, function ___(__0, __1) { callbackArgs = __1;
                    result = callbackArgs[0];
                    response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__13() { if (e) {

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__13() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__13() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__13() {


          if ((response.statusCode == 200)) {
            log.info((("Command successfully invoked for endpoint " + options.name) + " and it is now stopped")); }
           else {
            log.info(("Error in stopping endpoint " + options.name)); } ; _(); }); }); }); });




  endpoint.command("purge <name> <profile-name> <resource-group> <content-paths>").description($("Purge the content of the given paths in the endpoint")).usage("[options] <name> <profile-name> <resource-group>").option("-n, --name <name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("-c, --content-paths <content-paths>", $("Content paths to be purged")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __14(name, profileName, resourceGroup, contentPaths, options, _) { var subscription, client, parsedContentPaths, progress, callbackArgs, result, response; var __frame = { name: "__14", line: 1023 }; return __func(_, this, arguments, __14, 5, __frame, function __$__14() {












      log.verbose(("arguments: " + JSON.stringify({
        profileName: profileName,
        options: options })));


      options.name = (options.name || name);
      options.profileName = (options.profileName || profileName);
      options.resourceGroup = (options.resourceGroup || resourceGroup);
      options.contentPaths = (options.contentPaths || contentPaths);

      if (!options.name) {
        return _(null, cli.missingArgument("name")); } else {
        if (!options.profileName) {
          return _(null, cli.missingArgument("profile-name")); } else {
          if (!options.resourceGroup) {
            return _(null, cli.missingArgument("resource-group")); } else {
            if (!options.contentPaths) {
              return _(null, cli.missingArgument("content-paths")); } ; } ; } ; } ;






      subscription = profile.current.getSubscription();
      client = utils.createCdnManagementClient(subscription);

      parsedContentPaths = (options.contentPaths ? options.contentPaths.split(",") : []);

      progress = cli.interaction.progress(util.format($(("Purging content for endpoint named " + options.name))));

      callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__14() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__14() {


                  return client.endpoints.purgeContent(options.name, options.profileName, options.resourceGroup, parsedContentPaths, __cb(_, __frame, 39, 40, function ___(__0, __1) { callbackArgs = __1;
                    result = callbackArgs[0];
                    response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__14() { if (e) {

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__14() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__14() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__14() { _(); }); }); }); });




  endpoint.command("load <name> <profile-name> <resource-group> <content-paths>").description($("Load the content of the given paths in the endpoint")).usage("[options] <name> <profile-name> <resource-group>").option("-n, --name <name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("-c, --content-paths <content-paths>", $("Content paths to be purged")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __15(name, profileName, resourceGroup, contentPaths, options, _) { var subscription, client, parsedContentPaths, progress, callbackArgs, result, response; var __frame = { name: "__15", line: 1081 }; return __func(_, this, arguments, __15, 5, __frame, function __$__15() {












      log.verbose(("arguments: " + JSON.stringify({
        profileName: profileName,
        options: options })));


      options.name = (options.name || name);
      options.profileName = (options.profileName || profileName);
      options.resourceGroup = (options.resourceGroup || resourceGroup);
      options.contentPaths = (options.contentPaths || contentPaths);

      if (!options.name) {
        return _(null, cli.missingArgument("name")); } else {
        if (!options.profileName) {
          return _(null, cli.missingArgument("profile-name")); } else {
          if (!options.resourceGroup) {
            return _(null, cli.missingArgument("resource-group")); } else {
            if (!options.contentPaths) {
              return _(null, cli.missingArgument("content-paths")); } ; } ; } ; } ;






      subscription = profile.current.getSubscription();
      client = utils.createCdnManagementClient(subscription);

      parsedContentPaths = (options.contentPaths ? options.contentPaths.split(",") : []);

      progress = cli.interaction.progress(util.format($(("Loading content for endpoint named " + options.name))));

      callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__15() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__15() {


                  return client.endpoints.loadContent(options.name, options.profileName, options.resourceGroup, parsedContentPaths, __cb(_, __frame, 39, 40, function ___(__0, __1) { callbackArgs = __1;
                    result = callbackArgs[0];
                    response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__15() { if (e) {

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__15() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__15() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__15() { _(); }); }); }); });




  endpoint.command("check <endpoint-name>").description($("Check if the endpoint name has been used or not")).usage("[options] <endpoint-name>").option("-n, --endpoint-name <endpoint-name>", $("Endpoint name")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __16(endpointName, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__16", line: 1136 }; return __func(_, this, arguments, __16, 2, __frame, function __$__16() {










      log.verbose(("arguments: " + JSON.stringify({
        endpointName: endpointName,
        options: options })));


      options.endpointName = (options.endpointName || endpointName);

      if (!options.endpointName) {
        return _(null, cli.missingArgument("endpoint-name")); } ;






      subscription = profile.current.getSubscription();
      client = utils.createCdnManagementClient(subscription);

      progress = cli.interaction.progress(util.format($(("Checking name availability for " + options.endpointName))));

      callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__16() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__16() {


                  return client.nameAvailability.checkNameAvailability(options.endpointName, "Microsoft.Cdn/Profiles/Endpoints", __cb(_, __frame, 29, 47, function ___(__0, __1) { callbackArgs = __1;
                    result = callbackArgs[0];
                    response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__16() { if (e) {

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__16() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__16() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__16() {


          if ((response.statusCode != 200)) {
            log.info("Command invoke failed, please retry"); } else {
            if (result.nameAvailable) {
              log.info((options.endpointName + " is valid to use")); }
             else {
              log.info((options.endpointName + " is already in use")); } ; } ; _(); }); }); }); });





  var origin = cdn.category("origin").description($("Commands to manage Azure cdn profile endpoint origin"));



  origin.command("show <name> <endpoint-name> <profile-name> <resource-group>").description($("Get origin by origin name, endpoint name, profile name, and resource group")).usage("[options] <name> <endpoint-name> <profile-name> <resource-group>").option("-n, --name <name>", $("Name of the origin")).option("-e, --endpoint-name <endpoint-name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __17(name, endpointName, profileName, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__17", line: 1197 }; return __func(_, this, arguments, __17, 5, __frame, function __$__17() {












      log.verbose(("arguments: " + JSON.stringify({
        profileName: profileName,
        options: options })));


      options.name = (options.name || name);
      options.endpointName = (options.endpointName || endpointName);
      options.profileName = (options.profileName || profileName);
      options.resourceGroup = (options.resourceGroup || resourceGroup);

      if (!options.name) {
        return _(null, cli.missingArgument("name")); } else {
        if (!options.endpointName) {
          return _(null, cli.missingArgument("endpoint-name")); } else {
          if (!options.profileName) {
            return _(null, cli.missingArgument("profile-name")); } else {
            if (!options.resourceGroup) {
              return _(null, cli.missingArgument("resource-group")); } ; } ; } ; } ;






      subscription = profile.current.getSubscription();
      client = utils.createCdnManagementClient(subscription);

      progress = cli.interaction.progress(util.format($(("Getting origin named " + options.name))));

      callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__17() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__17() {


                  return client.origins.get(options.name, options.endpointName, options.profileName, options.resourceGroup, __cb(_, __frame, 37, 38, function ___(__0, __1) { callbackArgs = __1;
                    result = callbackArgs[0];
                    response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__17() { if (e) {

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__17() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__17() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__17() {


          cli.interaction.formatOutput(result, function(data) {
            if (!data) {
              log.info($("No origin named %s found."), options.profileName); }
             else {
              log.data("");
              log.data($("origin name                  :"), result.name);
              log.data("");
              log.data($("endpoint name                  :"), options.endpointName);
              log.data($("profile name                   :"), options.profilename);
              log.data($("resource group                 :"), options.resourcegroup);
              log.data($("type                           :"), result.type);
              log.data($("host name                      :"), result.hostName);
              log.data($("http port                      :"), result.httpPort);
              log.data($("https port                     :"), result.httpsPort);
              log.data($("resource state                 :"), result.resourcestate);
              log.data($("provisioning state             :"), result.provisioningstate);
              log.data(""); } ; }); _(); }); }); }); });





  origin.command("set <name> <endpoint-name> <profile-name> <resource-group>").description($("Update origin of the given origin name, endpoint name, profile name, and resource group")).usage("[options] <name> <endpoint-name> <profile-name> <resource-group> [host-name] [http-port] [https-port]").option("-n, --name <name>", $("Name of the origin")).option("-e, --endpoint-name <endpoint-name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("-o, --host-name [host-name]", $("Host name")).option("-r, --http-port [http-port]", $("Http port")).option("-w, --https-port [https-port]", $("Https port")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __18(name, endpointName, profileName, resourceGroup, options, _) { var subscription, client, originUpdateParameter, progress, callbackArgs, result, response; var __frame = { name: "__18", line: 1276 }; return __func(_, this, arguments, __18, 5, __frame, function __$__18() {














      log.verbose(("arguments: " + JSON.stringify({
        profileName: profileName,
        options: options })));


      options.name = (options.name || name);
      options.endpointName = (options.endpointName || endpointName);
      options.profileName = (options.profileName || profileName);
      options.resourceGroup = (options.resourceGroup || resourceGroup);

      if (!options.name) {
        return _(null, cli.missingArgument("name")); } else {
        if (!options.endpointName) {
          return _(null, cli.missingArgument("endpoint-name")); } else {
          if (!options.profileName) {
            return _(null, cli.missingArgument("profile-name")); } else {
            if (!options.resourceGroup) {
              return _(null, cli.missingArgument("resource-group")); } ; } ; } ; } ;






      subscription = profile.current.getSubscription();
      client = utils.createCdnManagementClient(subscription);

      originUpdateParameter = { };
      if (options.hostName) {
        originUpdateParameter.hostName = options.hostName; } ;

      if (options.httpPort) {
        originUpdateParameter.httpPort = parseInt(options.httpPort); } ;

      if (options.httpsPort) {
        originUpdateParameter.httpsPort = parseInt(options.httpsPort); } ;



      progress = cli.interaction.progress(util.format($(("Updating origin named " + options.name))));

      callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__18() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__18() {


                  return client.origins.update(options.name, originUpdateParameter, options.endpointName, options.profileName, options.resourceGroup, __cb(_, __frame, 48, 38, function ___(__0, __1) { callbackArgs = __1;
                    result = callbackArgs[0];
                    response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__18() { if (e) {

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__18() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__18() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__18() {


          cli.interaction.formatOutput(result, function(data) {
            if (!data) {
              log.info($("No origin named %s found to update."), options.profileName); }
             else {
              log.data("");
              log.data($("origin name                  :"), result.name);
              log.data("");
              log.data($("endpoint name                  :"), options.endpointName);
              log.data($("profile name                   :"), options.profileName);
              log.data($("resource group                 :"), options.resourceGroup);
              log.data($("type                           :"), result.type);
              log.data($("host name                      :"), result.hostName);
              log.data($("http port                      :"), result.httpPort);
              log.data($("https port                     :"), result.httpsPort);
              log.data($("resource state                 :"), result.resourceState);
              log.data($("provisioning state             :"), result.provisioningState);
              log.data(""); } ; }); _(); }); }); }); });







  var customDomain = cdn.category("customDomain").description($("Commands to manage Azure cdn profile endpoint custom domain"));



  customDomain.command("list <endpoint-name> <profile-name> <resource-group>").description($("List custom domains by endpoint name, profile name, and resource group")).usage("[options] <endpoint-name> <profile-name> <resource-group>").option("-e, --endpoint-name <endpoint-name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __19(endpointName, profileName, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__19", line: 1368 }; return __func(_, this, arguments, __19, 4, __frame, function __$__19() {











      log.verbose(("arguments: " + JSON.stringify({
        profileName: profileName,
        options: options })));


      options.endpointName = (options.endpointName || endpointName);
      options.profileName = (options.profileName || profileName);
      options.resourceGroup = (options.resourceGroup || resourceGroup);

      if (!options.endpointName) {
        return _(null, cli.missingArgument("endpoint-name")); } else {
        if (!options.profileName) {
          return _(null, cli.missingArgument("profile-name")); } else {
          if (!options.resourceGroup) {
            return _(null, cli.missingArgument("resource-group")); } ; } ; } ;






      subscription = profile.current.getSubscription();
      client = utils.createCdnManagementClient(subscription);

      progress = cli.interaction.progress(util.format($(("Listing custom domain under " + options.endpointName))));

      callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__19() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__19() {


                  return client.customDomains.listByEndpoint(options.endpointName, options.profileName, options.resourceGroup, __cb(_, __frame, 34, 44, function ___(__0, __1) { callbackArgs = __1;
                    result = callbackArgs[0];
                    response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__19() { if (e) {

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__19() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__19() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__19() {


          cli.interaction.formatOutput(result, function() {
            if ((!result || (result.length === 0))) {
              log.info($(("No custom domains found under " + options.endpointName))); }
             else {
              log.table(result, function(row, cd) {
                row.cell($("Name"), cd.name);
                row.cell($("Endpoint"), options.endpointName);
                row.cell($("HostName"), cd.hostName);
                row.cell($("ProvisioningState"), cd.provisioningState);
                row.cell($("ResourceState"), cd.resourceState); }); } ; }); _(); }); }); }); });






  customDomain.command("show <name> <endpoint-name> <profile-name> <resource-group>").description($("Get custom domains by custom domain name, endpoint name, profile name, and resource group")).usage("[options] <name> <profile-name> <resource-group>").option("-n, --name <name>", $("Name of the custom domain")).option("-e, --endpoint-name <endpoint-name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __20(name, endpointName, profileName, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__20", line: 1435 }; return __func(_, this, arguments, __20, 5, __frame, function __$__20() {












      log.verbose(("arguments: " + JSON.stringify({
        profileName: profileName,
        options: options })));


      options.name = (options.name || name);
      options.endpointName = (options.endpointName || endpointName);
      options.profileName = (options.profileName || profileName);
      options.resourceGroup = (options.resourceGroup || resourceGroup);

      if (!options.name) {
        return _(null, cli.missingArgument("name")); } else {
        if (!options.endpointName) {
          return _(null, cli.missingArgument("endpoint-name")); } else {
          if (!options.profileName) {
            return _(null, cli.missingArgument("profile-name")); } else {
            if (!options.resourceGroup) {
              return _(null, cli.missingArgument("resource-group")); } ; } ; } ; } ;






      subscription = profile.current.getSubscription();
      client = utils.createCdnManagementClient(subscription);

      progress = cli.interaction.progress(util.format($(("Getting custom domain named " + options.name))));

      callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__20() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__20() {


                  return client.customDomains.get(options.name, options.endpointName, options.profileName, options.resourceGroup, __cb(_, __frame, 37, 44, function ___(__0, __1) { callbackArgs = __1;
                    result = callbackArgs[0];
                    response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__20() { if (e) {

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__20() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__20() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__20() {



          cli.interaction.formatOutput(result, function(data) {
            if (!data) {
              log.info($("No custom domain named %s found."), options.name); }
             else {
              log.data("");
              log.data($("custom domain name             :"), result.name);
              log.data("");
              log.data($("endpoint name                  :"), options.endpointName);
              log.data($("profile name                   :"), options.profileName);
              log.data($("resource group                 :"), options.resourceGroup);
              log.data($("type                           :"), result.type);
              log.data($("host name                      :"), result.hostName);
              log.data($("resource state                 :"), result.resourceState);
              log.data($("provisioning state             :"), result.provisioningState);
              log.data($("id                             :"), result.id);
              log.data(""); } ; }); _(); }); }); }); });





  customDomain.command("create <name> <endpoint-name> <profile-name> <resource-group> <custom-domain-host-name>").description($("Create a custom domain of a perticular custom domain host name")).usage("[options] <name> <endpoint-name> <profile-name> <resource-group> <custom-domain-host-name>").option("-n, --name <name>", $("Name of the custom domain")).option("-e, --endpoint-name <endpoint-name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("-d, --custom-domain-host-name <custom-domain-host-name>", $("The host name of the custom domain")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __21(name, endpointName, profileName, resourceGroup, customDomainHostName, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__21", line: 1512 }; return __func(_, this, arguments, __21, 6, __frame, function __$__21() {













      log.verbose(("arguments: " + JSON.stringify({
        profileName: profileName,
        options: options })));


      options.name = (options.name || name);
      options.endpointName = (options.endpointName || endpointName);
      options.profileName = (options.profileName || profileName);
      options.resourceGroup = (options.resourceGroup || resourceGroup);
      options.customDomainHostName = (options.customDomainHostName || customDomainHostName);

      if (!options.name) {
        return _(null, cli.missingArgument("custom-domain-name")); } else {
        if (!options.endpointName) {
          return _(null, cli.missingArgument("endpoint-name")); } else {
          if (!options.profileName) {
            return _(null, cli.missingArgument("profile-name")); } else {
            if (!options.resourceGroup) {
              return _(null, cli.missingArgument("resource-group")); } else {
              if (!options.customDomainHostName) {
                return _(null, cli.missingArgument("custom-domain-host-name")); } ; } ; } ; } ; } ;






      subscription = profile.current.getSubscription();
      client = utils.createCdnManagementClient(subscription);

      progress = cli.interaction.progress(util.format($(("Creating custom domain named " + options.name))));

      callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__21() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__21() {


                  return client.customDomains.create(options.name, options.endpointName, options.profileName, options.resourceGroup, options.customDomainHostName, __cb(_, __frame, 40, 44, function ___(__0, __1) { callbackArgs = __1;
                    result = callbackArgs[0];
                    response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__21() { if (e) {

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__21() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__21() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__21() {


          cli.interaction.formatOutput(result, function() {
            log.data("");
            log.data($("custom domain name             :"), result.name);
            log.data("");
            log.data($("endpoint name                  :"), options.endpointName);
            log.data($("profile name                   :"), options.profileName);
            log.data($("resource group                 :"), options.resourceGroup);
            log.data($("type                           :"), result.type);
            log.data($("host name                      :"), result.hostName);
            log.data($("resource state                 :"), result.resourceState);
            log.data($("provisioning state             :"), result.provisioningState);
            log.data($("id                             :"), result.id);
            log.data(""); }); _(); }); }); }); });




  customDomain.command("delete <name> <endpoint-name> <profile-name> <resource-group>").description($("Delete a custom domain of a perticular custom domain host name")).usage("[options] <name> <endpoint-name> <profile-name> <resource-group>").option("-n, --name <name>", $("Name of the custom domain")).option("-e, --endpoint-name <endpoint-name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __22(name, endpointName, profileName, resourceGroup, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__22", line: 1586 }; return __func(_, this, arguments, __22, 5, __frame, function __$__22() {












      log.verbose(("arguments: " + JSON.stringify({
        profileName: profileName,
        options: options })));


      options.name = (options.name || name);
      options.endpointName = (options.endpointName || endpointName);
      options.profileName = (options.profileName || profileName);
      options.resourceGroup = (options.resourceGroup || resourceGroup);

      if (!options.name) {
        return _(null, cli.missingArgument("custom-domain-name")); } else {
        if (!options.endpointName) {
          return _(null, cli.missingArgument("endpoint-name")); } else {
          if (!options.profileName) {
            return _(null, cli.missingArgument("profile-name")); } else {
            if (!options.resourceGroup) {
              return _(null, cli.missingArgument("resource-group")); } ; } ; } ; } ;






      subscription = profile.current.getSubscription();
      client = utils.createCdnManagementClient(subscription);

      progress = cli.interaction.progress(util.format($(("Updating custom domain named " + options.name))));

      callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__22() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__22() {


                  return client.customDomains.deleteIfExists(options.name, options.endpointName, options.profileName, options.resourceGroup, __cb(_, __frame, 37, 44, function ___(__0, __1) { callbackArgs = __1;
                    result = callbackArgs[0];
                    response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__22() { if (e) {

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__22() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__22() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__22() {


          if ((response.statusCode == 200)) {
            log.info(("Delete command successfully invoked for custom domain " + options.name)); } else {
            if ((response.statusCode == 204)) {
              log.info((("Delete success, but no custom domain named " + options.name) + " was found")); }
             else {
              log.info(("Error in deleting custom domain " + options.customDomainName)); } ; } ; _(); }); }); }); });




  customDomain.command("validate <endpoint-name> <profile-name> <resource-group> <custom-domain-host-name>").description($("Check to see if a custom domain host name is registered for cname mapping to the endpoint ")).usage("[options] <endpoint-name> <profile-name> <resource-group> <custom-domain-host-name>").option("-e, --endpoint-name <endpoint-name>", $("Name of the endpoint")).option("-p, --profile-name <profile-name>", $("Name of the profile")).option("-g, --resource-group <resource-group>", $("The resource group of the Azure Cdn Profile")).option("-d, --custom-domain-host-name <custom-domain-host-name>", $("The host name of the custom domain")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __23(endpointName, profileName, resourceGroup, customDomainHostName, options, _) { var subscription, client, progress, callbackArgs, result, response; var __frame = { name: "__23", line: 1650 }; return __func(_, this, arguments, __23, 5, __frame, function __$__23() {












      log.verbose(("arguments: " + JSON.stringify({
        profileName: profileName,
        options: options })));


      options.endpointName = (options.endpointName || endpointName);
      options.profileName = (options.profileName || profileName);
      options.resourceGroup = (options.resourceGroup || resourceGroup);
      options.customDomainHostName = (options.customDomainHostName || customDomainHostName);

      if (!options.endpointName) {
        return _(null, cli.missingArgument("endpoint-name")); } else {
        if (!options.profileName) {
          return _(null, cli.missingArgument("profile-name")); } else {
          if (!options.resourceGroup) {
            return _(null, cli.missingArgument("resource-group")); } else {
            if (!options.customDomainHostName) {
              return _(null, cli.missingArgument("custom-domain-host-name")); } ; } ; } ; } ;






      subscription = profile.current.getSubscription();
      client = utils.createCdnManagementClient(subscription);

      progress = cli.interaction.progress(util.format($(("Validating custom domain host name: " + options.customDomainHostName))));

      callbackArgs = []; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__23() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__23() {


                  return client.endpoints.validateCustomDomain(options.endpointName, options.profileName, options.resourceGroup, options.customDomainHostName, __cb(_, __frame, 37, 40, function ___(__0, __1) { callbackArgs = __1;
                    result = callbackArgs[0];
                    response = callbackArgs[2]; __then(); }, true, true)); }); })(function ___(e, __result) { __catch(function __$__23() { if (e) {

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$__23() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__23() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__23() {

          cli.interaction.formatOutput(result, function() {
            if ((response.statusCode != 200)) {
              log.info("Command invoke failed, please retry"); }
             else if (result.customDomainValidated) {
              log.info((("Validate host name " + options.customDomainHostName) + " success")); }
             else {
              log.info((("Validate host name " + options.customDomainHostName) + " failed"));
              log.info(("Reason: " + result.reason));
              log.info(("Message: " + result.message)); }  ; }); _(); }); }); }); });};
