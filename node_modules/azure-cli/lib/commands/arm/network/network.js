/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb; var util = require("util");

















var utils = require("../../../util/utils");
var profile = require("../../../util/profile/index");
var constants = require("./constants");
var $ = utils.getLocaleString;

var VirtualNetwork = require("./virtualNetwork");
var Subnet = require("./subnet");
var NetworkUsage = require("./networkUsage");
var LoadBalancer = require("./loadBalancer");
var PublicIp = require("./publicIp");
var Nic = require("./nic");
var Nsg = require("./nsg");
var DnsZone = require("./dnsZone");
var TrafficManager = require("./trafficManager");
var RouteTable = require("./routeTable");
var LocalNetworkGateway = require("./localNetworkGateway");
var VirtualNetworkGateway = require("./virtualNetworkGateway");
var AppGateway = require("./appGateway");
var ExpressRoute = require("./expressRoute");

exports.init = function(cli) {
  var network = cli.category("network").description($("Commands to manage network resources"));


  var vnet = network.category("vnet").description($("Commands to manage virtual networks"));


  vnet.command("create [resource-group] [name] [location]").description("Create a virtual network").usage("[options] <resource-group> <name> <location>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the virtual network")).option("-l, --location <location>", $("the location")).option("-a, --address-prefixes <address-prefixes>", $((("the comma separated list of address prefixes for this virtual network." + "\n     For example, -a \"10.0.0.0/24,10.0.1.0/24\"") + "\n     Default value is 10.0.0.0/8"))).option("-d, --dns-servers <dns-servers>", $("the comma separated list of DNS servers IP addresses")).option("-t, --tags <tags>", $(constants.help.tags.create)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __1(resourceGroup, name, location, options, _) { var networkManagementClient, virtualNetwork; var __frame = { name: "__1", line: 58 }; return __func(_, this, arguments, __1, 4, __frame, function __$__1() {












      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Location: "), location, __cb(_, __frame, 3, 41, function ___(__0, __3) { options.location = __3;

            networkManagementClient = getNetworkManagementClient(options);
            virtualNetwork = new VirtualNetwork(cli, networkManagementClient);
            return virtualNetwork.create(resourceGroup, name, options, __cb(_, __frame, 7, 21, function __$__1() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  vnet.command("set [resource-group] [name]").description("Set virtual network").usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the virtual network")).option("-a, --address-prefixes <address-prefixes>", $((((("the comma separated list of address prefixes for this virtual network." + "\n     For example, -a \"10.0.0.0/24,10.0.1.0/24\"") + "\n     This list will be appended to the current list of address prefixes.") + "\n     The address prefixes in this list should not overlap between them.") + "\n     The address prefixes in this list should not overlap with existing address prefixes in the vnet."))).option("-d, --dns-servers [dns-servers]", $(("the comma separated list of DNS servers IP addresses." + "\n     This list will be appended to the current list of DNS server IP addresses."))).option("-t, --tags [tags]", $(constants.help.tags.set)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __2(resourceGroup, name, options, _) { var networkManagementClient, virtualNetwork; var __frame = { name: "__2", line: 82 }; return __func(_, this, arguments, __2, 3, __frame, function __$__2() {














      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          virtualNetwork = new VirtualNetwork(cli, networkManagementClient);
          return virtualNetwork.set(resourceGroup, name, options, __cb(_, __frame, 6, 21, function __$__2() { _(); }, true)); }, true)); }, true)); }); });


  vnet.command("list [resource-group]").description("Get all virtual networks").usage("[options] [resource-group]").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __3(resourceGroup, options, _) { var networkManagementClient, virtualNetwork; var __frame = { name: "__3", line: 96 }; return __func(_, this, arguments, __3, 2, __frame, function __$__3() {





      options.resourceGroup = resourceGroup;
      networkManagementClient = getNetworkManagementClient(options);
      virtualNetwork = new VirtualNetwork(cli, networkManagementClient);
      return virtualNetwork.list(options, __cb(_, __frame, 4, 21, function __$__3() { _(); }, true)); }); });


  vnet.command("show [resource-group] [name]").description("Get a virtual network").usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the virtual network")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __4(resourceGroup, name, location, options, _) { var networkManagementClient, virtualNetwork; var __frame = { name: "__4", line: 109 }; return __func(_, this, arguments, __4, 4, __frame, function __$__4() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          virtualNetwork = new VirtualNetwork(cli, networkManagementClient);
          return virtualNetwork.show(resourceGroup, name, options, __cb(_, __frame, 6, 21, function __$__4() { _(); }, true)); }, true)); }, true)); }); });


  vnet.command("delete [resource-group] [name]").description("Delete a virtual network").usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the virtual network")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __5(resourceGroup, name, options, _) { var networkManagementClient, virtualNetwork; var __frame = { name: "__5", line: 125 }; return __func(_, this, arguments, __5, 3, __frame, function __$__5() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          virtualNetwork = new VirtualNetwork(cli, networkManagementClient);
          return virtualNetwork.delete(resourceGroup, name, options, __cb(_, __frame, 6, 21, function __$__5() { _(); }, true)); }, true)); }, true)); }); });


  var subnet = vnet.category("subnet").description($("Commands to manage virtual network subnets"));


  subnet.command("create [resource-group] [vnet-name] [name]").description($("Create virtual network subnet")).usage("[options] <resource-group> <vnet-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-e, --vnet-name <vnet-name>", $("the name of the virtual network")).option("-n, --name <name>", $("the name of the subnet")).option("-a, --address-prefix <address-prefix>", $("the address prefix in CIDR format")).option("-w, --network-security-group-id <network-security-group-id>", util.format($(("the network security group identifier." + "\n     e.g. %s")), constants.help.id.nsg)).option("-o, --network-security-group-name <network-security-group-name>", $("the network security group name")).option("-i, --route-table-id <route-table-id>", util.format($(("the route table identifier." + "\n     e.g. %s")), constants.help.id.routeTable)).option("-r, --route-table-name <route-table-name>", $("the route table name")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __6(resourceGroup, vnetName, name, options, _) { var networkManagementClient, subnet; var __frame = { name: "__6", line: 151 }; return __func(_, this, arguments, __6, 4, __frame, function __$__6() {














      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network name: "), vnetName, __cb(_, __frame, 2, 33, function ___(__0, __2) { vnetName = __2;
          return cli.interaction.promptIfNotGiven($("Subnet name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("Address prefix: "), options.addressPrefix, __cb(_, __frame, 4, 46, function ___(__0, __4) { options.addressPrefix = __4;

              networkManagementClient = getNetworkManagementClient(options);
              subnet = new Subnet(cli, networkManagementClient);
              return subnet.create(resourceGroup, vnetName, name, options, __cb(_, __frame, 8, 13, function __$__6() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  subnet.command("set [resource-group] [vnet-name] [name]").description($("Set a virtual network subnet")).usage("[options] <resource-group> <vnet-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-e, --vnet-name <vnet-name>", $("the name of the virtual network")).option("-n, --name <name>", $("the name of the subnet")).option("-a, --address-prefix <address-prefix>", $("the address prefix in CIDR format")).option("-w, --network-security-group-id [network-security-group-id]", util.format($(("the network security group identifier." + "\n     e.g. %s")), constants.help.id.nsg)).option("-o, --network-security-group-name [network-security-group-name]", $("the network security group name")).option("-i, --route-table-id [route-table-id]", util.format($(("the route table identifier." + "\n     e.g. %s")), constants.help.id.routeTable)).option("-r, --route-table-name [route-table-name]", $("the route table name")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __7(resourceGroup, vnetName, name, options, _) { var networkManagementClient, subnet; var __frame = { name: "__7", line: 176 }; return __func(_, this, arguments, __7, 4, __frame, function __$__7() {














      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network name: "), vnetName, __cb(_, __frame, 2, 33, function ___(__0, __2) { vnetName = __2;
          return cli.interaction.promptIfNotGiven($("Subnet name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            subnet = new Subnet(cli, networkManagementClient);
            return subnet.set(resourceGroup, vnetName, name, options, __cb(_, __frame, 7, 13, function __$__7() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  subnet.command("list [resource-group] [vnet-name]").description($("Get all virtual network subnets")).usage("[options] <resource-group> <vnet-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-e, --vnet-name <vnet-name>", $("the name of the virtual network")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __8(resourceGroup, vnetName, options, _) { var networkManagementClient, subnet; var __frame = { name: "__8", line: 192 }; return __func(_, this, arguments, __8, 3, __frame, function __$__8() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network name: "), vnetName, __cb(_, __frame, 2, 33, function ___(__0, __2) { vnetName = __2;

          networkManagementClient = getNetworkManagementClient(options);
          subnet = new Subnet(cli, networkManagementClient);
          return subnet.list(resourceGroup, vnetName, options, __cb(_, __frame, 6, 13, function __$__8() { _(); }, true)); }, true)); }, true)); }); });


  subnet.command("show [resource-group] [vnet-name] [name]").description($("Get a virtual network subnet")).usage("[options] <resource-group> <vnet-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-e, --vnet-name <vnet-name>", $("the name of the virtual network")).option("-n, --name <name>", $("the name of the subnet")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __9(resourceGroup, vnetName, name, options, _) { var networkManagementClient, subnet; var __frame = { name: "__9", line: 208 }; return __func(_, this, arguments, __9, 4, __frame, function __$__9() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network name: "), vnetName, __cb(_, __frame, 2, 33, function ___(__0, __2) { vnetName = __2;
          return cli.interaction.promptIfNotGiven($("Subnet name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            subnet = new Subnet(cli, networkManagementClient);
            return subnet.show(resourceGroup, vnetName, name, options, __cb(_, __frame, 7, 13, function __$__9() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  subnet.command("delete [resource-group] [vnet-name] [name]").description($("Delete a subnet of a virtual network")).usage("[options] <resource-group> <vnet-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-e, --vnet-name <vnet-name>", $("the name of the virtual network")).option("-n, --name <name>", $("the subnet name")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __10(resourceGroup, vnetName, name, options, _) { var networkManagementClient, subnet; var __frame = { name: "__10", line: 226 }; return __func(_, this, arguments, __10, 4, __frame, function __$__10() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network name: "), vnetName, __cb(_, __frame, 2, 33, function ___(__0, __2) { vnetName = __2;
          return cli.interaction.promptIfNotGiven($("Subnet name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            subnet = new Subnet(cli, networkManagementClient);
            return subnet.delete(resourceGroup, vnetName, name, options, __cb(_, __frame, 7, 13, function __$__10() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var usage = network.category("usage").description($("Commands to manage network usage"));


  usage.command("list [location]").description($("List usage of network resources.")).usage("[options] <location>").option("-l, --location <location>", $("the location")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __11(location, options, _) { var networkManagementClient, networkUsage; var __frame = { name: "__11", line: 244 }; return __func(_, this, arguments, __11, 2, __frame, function __$__11() {





      return cli.interaction.promptIfNotGiven($("Location: "), location, __cb(_, __frame, 1, 35, function ___(__0, __1) { location = __1;
        location = utils.toLowerCaseAndRemoveSpace(location);
        networkManagementClient = getNetworkManagementClient(options);
        networkUsage = new NetworkUsage(cli, networkManagementClient);
        return networkUsage.list(location, options, __cb(_, __frame, 5, 21, function __$__11() { _(); }, true)); }, true)); }); });


  var lb = network.category("lb").description($("Commands to manage load balancers"));


  lb.command("create [resource-group] [name] [location]").description($("Create a load balancer")).usage("[options] <resource-group> <name> <location>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the load balancer")).option("-l, --location <location>", $("the location")).option("-t, --tags <tags>", $(constants.help.tags.create)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __12(resourceGroup, name, location, options, _) { var networkManagementClient, loadBalancer; var __frame = { name: "__12", line: 263 }; return __func(_, this, arguments, __12, 4, __frame, function __$__12() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Location: "), location, __cb(_, __frame, 3, 41, function ___(__0, __3) { options.location = __3;

            networkManagementClient = getNetworkManagementClient(options);
            loadBalancer = new LoadBalancer(cli, networkManagementClient);
            return loadBalancer.create(resourceGroup, name, options, __cb(_, __frame, 7, 19, function __$__12() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  lb.command("set [resource-group] [name]").description($("Set a load balancer")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the load balancer")).option("-t, --tags [tags]", $(constants.help.tags.set)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __13(resourceGroup, name, options, _) { var networkManagementClient, loadBalancer; var __frame = { name: "__13", line: 280 }; return __func(_, this, arguments, __13, 3, __frame, function __$__13() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          loadBalancer = new LoadBalancer(cli, networkManagementClient);
          return loadBalancer.set(resourceGroup, name, options, __cb(_, __frame, 6, 19, function __$__13() { _(); }, true)); }, true)); }, true)); }); });


  lb.command("list [resource-group]").description($("Get all load balancers")).usage("[options] [resource-group]").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __14(resourceGroup, options, _) { var networkManagementClient, loadBalancer; var __frame = { name: "__14", line: 294 }; return __func(_, this, arguments, __14, 2, __frame, function __$__14() {





      options.resourceGroup = resourceGroup;
      networkManagementClient = getNetworkManagementClient(options);
      loadBalancer = new LoadBalancer(cli, networkManagementClient);
      return loadBalancer.list(options, __cb(_, __frame, 4, 19, function __$__14() { _(); }, true)); }); });


  lb.command("show [resource-group] [name]").description($("Get a load balancer")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the load balancer")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __15(resourceGroup, name, options, _) { var networkManagementClient, loadBalancer; var __frame = { name: "__15", line: 307 }; return __func(_, this, arguments, __15, 3, __frame, function __$__15() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          loadBalancer = new LoadBalancer(cli, networkManagementClient);
          return loadBalancer.show(resourceGroup, name, options, __cb(_, __frame, 6, 19, function __$__15() { _(); }, true)); }, true)); }, true)); }); });


  lb.command("delete [resource-group] [name]").description($("Delete a load balancer")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the load balancer")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __16(resourceGroup, name, options, _) { var networkManagementClient, loadBalancer; var __frame = { name: "__16", line: 323 }; return __func(_, this, arguments, __16, 3, __frame, function __$__16() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          loadBalancer = new LoadBalancer(cli, networkManagementClient);
          return loadBalancer.delete(resourceGroup, name, options, __cb(_, __frame, 6, 19, function __$__16() { _(); }, true)); }, true)); }, true)); }); });


  var lbFrontendIP = lb.category("frontend-ip").description("Commands to manage frontend ip configurations of a load balancer");


  lbFrontendIP.command("create [resource-group] [lb-name] [name]").description($("Add a frontend ip configuration to the load balancer")).usage("[options] <resource-group> <lb-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the frontend ip configuration")).option("-a, --private-ip-address <private-ip-address>", $("the private ip address")).option("-u, --public-ip-id <public-ip-id>", util.format($(("the public ip address identifier." + "\n     e.g. %s")), constants.help.id.publicIp)).option("-i, --public-ip-name <public-ip-name>", $((("the public ip address name." + "\n     This public ip must exist in the same resource group as the load balancer.") + "\n     Please use public-ip-id if that is not the case."))).option("-b, --subnet-id <subnet-id>", util.format($(("the subnet identifier." + "\n     e.g. %s")), constants.help.id.subnet)).option("-e, --subnet-name <subnet-name>", $("the subnet name")).option("-m, --subnet-vnet-name <subnet-vnet-name>", $((("the virtual network name in which subnet exists." + "\n     This virtual network must exist in the same resource group as the load balancer.") + "\n     Please use subnet-id if that is not the case."))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __17(resourceGroup, lbName, name, options, _) { var networkManagementClient, loadBalancer; var __frame = { name: "__17", line: 354 }; return __func(_, this, arguments, __17, 4, __frame, function __$__17() {



















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Frontend IP configuration name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            loadBalancer = new LoadBalancer(cli, networkManagementClient);
            return loadBalancer.createFrontendIP(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__17() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  lbFrontendIP.command("set [resource-group] [lb-name] [name]").description($("Set a frontend ip configuration of a load balancer")).usage("[options] <resource-group> <lb-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the frontend ip configuration")).option("-a, --private-ip-address [private-ip-address]", $("the private ip address")).option("-u, --public-ip-id <public-ip-id>", util.format($(("the public ip address identifier." + "\n     e.g. %s")), constants.help.id.publicIp)).option("-i, --public-ip-name <public-ip-name>", $((("the public ip address name." + "\n     This public ip must exist in the same resource group as the load balancer.") + "\n     Please use public-ip-id if that is not the case."))).option("-b, --subnet-id <subnet-id>", util.format($(("the subnet identifier." + "\n     e.g. %s")), constants.help.id.subnet)).option("-e, --subnet-name <subnet-name>", $("the subnet name")).option("-m, --subnet-vnet-name <subnet-vnet-name>", $((("the virtual network name in which subnet exists." + "\n     This virtual network must exist in the same resource group as the load balancer.") + "\n     Please use subnet-id if that is not the case."))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __18(resourceGroup, lbName, name, options, _) { var networkManagementClient, loadBalancer; var __frame = { name: "__18", line: 383 }; return __func(_, this, arguments, __18, 4, __frame, function __$__18() {



















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Frontend IP configuration name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            loadBalancer = new LoadBalancer(cli, networkManagementClient);
            return loadBalancer.setFrontendIP(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__18() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  lbFrontendIP.command("list [resource-group] [lb-name]").description($("Get all frontend ip configurations in the load balancer")).usage("[options] <resource-group> <lb-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __19(resourceGroup, lbName, options, _) { var networkManagementClient, loadBalancer; var __frame = { name: "__19", line: 399 }; return __func(_, this, arguments, __19, 3, __frame, function __$__19() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;

          networkManagementClient = getNetworkManagementClient(options);
          loadBalancer = new LoadBalancer(cli, networkManagementClient);
          return loadBalancer.listFrontendIPs(resourceGroup, lbName, options, __cb(_, __frame, 6, 19, function __$__19() { _(); }, true)); }, true)); }, true)); }); });


  lbFrontendIP.command("delete [resource-group] [lb-name] [name]").description($("Delete a frontend ip configuration from a load balancer")).usage("[options] <resource-group> <lb-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the frontend ip configuration")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __20(resourceGroup, lbName, name, options, _) { var networkManagementClient, loadBalancer; var __frame = { name: "__20", line: 416 }; return __func(_, this, arguments, __20, 4, __frame, function __$__20() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Frontend ip configuration name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            loadBalancer = new LoadBalancer(cli, networkManagementClient);
            return loadBalancer.deleteFrontendIP(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__20() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var lbProbe = lb.category("probe").description($("Commands to manage probes of a load balancer"));


  lbProbe.command("create [resource-group] [lb-name] [name]").description($("Add a probe to the load balancer")).usage("[options] <resource-group> <lb-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the probe")).option("-p, --protocol <protocol>", $("the probe protocol")).option("-o, --port <port>", $("the probe port")).option("-f, --path <path>", $("the probe path")).option("-i, --interval <interval>", $("the probe interval in seconds")).option("-c, --count <count>", $("the number of probes")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __21(resourceGroup, lbName, name, options, _) { var networkManagementClient, loadBalancer; var __frame = { name: "__21", line: 441 }; return __func(_, this, arguments, __21, 4, __frame, function __$__21() {












      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Probe name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            loadBalancer = new LoadBalancer(cli, networkManagementClient);
            return loadBalancer.createProbe(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__21() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  lbProbe.command("set [resource-group] [lb-name] [name]").usage("[options] <resource-group> <lb-name> <name>").description($("Set a probe of a load balancer")).option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the probe")).option("-p, --protocol <protocol>", $("the probe protocol")).option("-o, --port <port>", $("the probe port")).option("-f, --path <path>", $("the probe path")).option("-i, --interval <interval>", $("the probe interval in seconds")).option("-c, --count <count>", $("the number of probes")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __22(resourceGroup, lbName, name, options, _) { var networkManagementClient, loadBalancer; var __frame = { name: "__22", line: 463 }; return __func(_, this, arguments, __22, 4, __frame, function __$__22() {












      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Probe name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            loadBalancer = new LoadBalancer(cli, networkManagementClient);
            return loadBalancer.setProbe(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__22() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  lbProbe.command("list [resource-group] [lb-name]").description($("Get all probes in a load balancer")).usage("[options] <resource-group> <lb-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __23(resourceGroup, lbName, options, _) { var networkManagementClient, loadBalancer; var __frame = { name: "__23", line: 479 }; return __func(_, this, arguments, __23, 3, __frame, function __$__23() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;

          networkManagementClient = getNetworkManagementClient(options);
          loadBalancer = new LoadBalancer(cli, networkManagementClient);
          return loadBalancer.listProbes(resourceGroup, lbName, options, __cb(_, __frame, 6, 19, function __$__23() { _(); }, true)); }, true)); }, true)); }); });


  lbProbe.command("delete [resource-group] [lb-name] [name]").description($("Delete a probe from a load balancer")).usage("[options] <resource-group> <lb-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the probe name")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __24(resourceGroup, lbName, name, options, _) { var networkManagementClient, loadBalancer; var __frame = { name: "__24", line: 496 }; return __func(_, this, arguments, __24, 4, __frame, function __$__24() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Probe name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            loadBalancer = new LoadBalancer(cli, networkManagementClient);
            return loadBalancer.deleteProbe(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__24() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var lbAddressPool = lb.category("address-pool").description("Commands to manage backend address pools of a load balancer");


  lbAddressPool.command("create [resource-group] [lb-name] [name]").description($("Add a backend address pool to the load balancer")).usage("[options] <resource-group> <lb-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the backend address pool")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __25(resourceGroup, lbName, name, options, _) { var networkManagementClient, loadBalancer; var __frame = { name: "__25", line: 516 }; return __func(_, this, arguments, __25, 4, __frame, function __$__25() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Backend address pool name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            loadBalancer = new LoadBalancer(cli, networkManagementClient);
            return loadBalancer.createBackendAddressPool(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__25() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  lbAddressPool.command("list [resource-group] [lb-name]").description($("Get all backend address pools in the load balancer")).usage("[options] <resource-group> <lb-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __26(resourceGroup, lbName, options, _) { var networkManagementClient, loadBalancer; var __frame = { name: "__26", line: 532 }; return __func(_, this, arguments, __26, 3, __frame, function __$__26() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;

          networkManagementClient = getNetworkManagementClient(options);
          loadBalancer = new LoadBalancer(cli, networkManagementClient);
          return loadBalancer.listBackendAddressPools(resourceGroup, lbName, options, __cb(_, __frame, 6, 19, function __$__26() { _(); }, true)); }, true)); }, true)); }); });


  lbAddressPool.command("delete [resource-group] [lb-name] [name]").description($("Delete a backend address pool from a load balancer")).usage("[options] <resource-group> <lb-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the backend address pool")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __27(resourceGroup, lbName, name, options, _) { var networkManagementClient, loadBalancer; var __frame = { name: "__27", line: 549 }; return __func(_, this, arguments, __27, 4, __frame, function __$__27() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Backend address pool name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            loadBalancer = new LoadBalancer(cli, networkManagementClient);
            return loadBalancer.deleteBackendAddressPool(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__27() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var lbRule = lb.category("rule").description($("Commands to manage load balancer rules"));


  lbRule.command("create [resource-group] [lb-name] [name]").description($("Add a load balancing rule to a load balancer")).usage("[options] <resource-group> <lb-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the rule")).option("-p, --protocol <protocol>", util.format($("the rule protocol [%s]"), constants.lb.protocols)).option("-f, --frontend-port <frontend-port>", util.format($("the frontend port %s"), utils.toRange(constants.portBounds))).option("-b, --backend-port <backend-port>", util.format($("the backend port %s"), utils.toRange(constants.portBounds))).option("-e, --enable-floating-ip <enable-floating-ip>", util.format($("enable floating point ip [%s]"), constants.bool)).option("-i, --idle-timeout <idle-timeout>", $("the idle timeout specified in minutes")).option("-a, --probe-name <probe-name>", $("the name of the probe defined in the same load balancer")).option("-d, --load-distribution <load-distribution>", $("client session persistence")).option("-t, --frontend-ip-name <frontend-ip-name>", $("the name of the frontend ip configuration in the same load balancer")).option("-o, --backend-address-pool-name <backend-address-pool-name>", $("the name of the backend address pool defined in the same load balancer")).option("-a, --probe-name <probe-name>", $("the name of the probe defined in the same load balancer")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __28(resourceGroup, lbName, name, options, _) { var networkManagementClient, loadBalancer; var __frame = { name: "__28", line: 579 }; return __func(_, this, arguments, __28, 4, __frame, function __$__28() {

















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Rule name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            loadBalancer = new LoadBalancer(cli, networkManagementClient);
            return loadBalancer.createBalancingRule(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__28() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  lbRule.command("set [resource-group] [lb-name] [name]").description($("Set a load balancing rule of a load balancer")).usage("[options] <resource-group> <lb-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the rule")).option("-p, --protocol <protocol>", util.format($("the rule protocol [%s]"), constants.lb.protocols)).option("-f, --frontend-port <frontend-port>", util.format($("the frontend port %s"), utils.toRange(constants.portBounds))).option("-b, --backend-port <backend-port>", util.format($("the backend port %s"), utils.toRange(constants.portBounds))).option("-e, --enable-floating-ip <enable-floating-ip>", util.format($("enable floating point ip [%s]"), constants.bool)).option("-i, --idle-timeout <idle-timeout>", $("the idle timeout specified in minutes")).option("-a, --probe-name [probe-name]", $("the name of the probe defined in the same load balancer")).option("-d, --load-distribution <load-distribution>", $("client session persistence")).option("-t, --frontend-ip-name <frontend-ip-name>", $("the name of the frontend ip configuration in the same load balancer")).option("-o, --backend-address-pool-name <backend-address-pool-name>", $("the name of the backend address pool defined in the same load balancer")).option("-a, --probe-name [probe-name]", $("the name of the probe defined in the same load balancer")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __29(resourceGroup, lbName, name, options, _) { var networkManagementClient, loadBalancer; var __frame = { name: "__29", line: 606 }; return __func(_, this, arguments, __29, 4, __frame, function __$__29() {

















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Rule name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            loadBalancer = new LoadBalancer(cli, networkManagementClient);
            return loadBalancer.setBalancingRule(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__29() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  lbRule.command("list [resource-group] [lb-name]").description($("Get all load balancing rules of a load balancer")).usage("[options] <resource-group> <lb-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __30(resourceGroup, lbName, options, _) { var networkManagementClient, loadBalancer; var __frame = { name: "__30", line: 622 }; return __func(_, this, arguments, __30, 3, __frame, function __$__30() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;

          networkManagementClient = getNetworkManagementClient(options);
          loadBalancer = new LoadBalancer(cli, networkManagementClient);
          return loadBalancer.listBalancingRules(resourceGroup, lbName, options, __cb(_, __frame, 6, 19, function __$__30() { _(); }, true)); }, true)); }, true)); }); });


  lbRule.command("delete [resource-group] [lb-name] [name]").description($("Delete a load balancing rule from a load balancer")).usage("[options] <resource-group> <lb-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the rule")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __31(resourceGroup, lbName, name, options, _) { var networkManagementClient, loadBalancer; var __frame = { name: "__31", line: 639 }; return __func(_, this, arguments, __31, 4, __frame, function __$__31() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Rule name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            loadBalancer = new LoadBalancer(cli, networkManagementClient);
            return loadBalancer.deleteBalancingRule(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__31() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var lbInboundNatRule = lb.category("inbound-nat-rule").description($("Commands to manage load balancer inbound NAT rules"));


  lbInboundNatRule.command("create [resource-group] [lb-name] [name]").description($("Add a load balancing inbound NAT rule to the load balancer")).usage("[options] <resource-group> <lb-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the inbound NAT rule")).option("-p, --protocol <protocol>", util.format($("the rule protocol [%s]"), constants.lb.protocols)).option("-f, --frontend-port <frontend-port>", util.format($("the frontend port %s"), utils.toRange(constants.portBounds))).option("-b, --backend-port <backend-port>", util.format($("the backend port %s"), utils.toRange(constants.portBounds))).option("-e, --enable-floating-ip <enable-floating-ip>", util.format($("enable floating point ip [%s]"), constants.bool)).option("-i, --idle-timeout <idle-timeout>", $("the idle timeout specified in minutes")).option("-t, --frontend-ip-name <frontend-ip-name>", $("the name of the frontend ip configuration")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __32(resourceGroup, lbName, name, options, _) { var networkManagementClient, loadBalancer; var __frame = { name: "__32", line: 665 }; return __func(_, this, arguments, __32, 4, __frame, function __$__32() {













      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Inbound NAT rule name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            loadBalancer = new LoadBalancer(cli, networkManagementClient);
            return loadBalancer.createInboundNatRule(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__32() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  lbInboundNatRule.command("set [resource-group] [lb-name] [name]").usage("[options] <resource-group> <lb-name> <name>").description($("Set a load balancing inbound NAT rule of load balancer")).option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the inbound NAT rule")).option("-p, --protocol <protocol>", util.format($("the rule protocol [%s]"), constants.lb.protocols)).option("-f, --frontend-port <frontend-port>", util.format($("the frontend port %s"), utils.toRange(constants.portBounds))).option("-b, --backend-port <backend-port>", util.format($("the backend port %s"), utils.toRange(constants.portBounds))).option("-e, --enable-floating-ip <enable-floating-ip>", util.format($("enable floating point ip [%s]"), constants.bool)).option("-i, --idle-timeout <idle-timeout>", $("the idle timeout specified in minutes")).option("-t, --frontend-ip-name <frontend-ip-name>", $("the name of the frontend ip configuration")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __33(resourceGroup, lbName, name, options, _) { var networkManagementClient, loadBalancer; var __frame = { name: "__33", line: 688 }; return __func(_, this, arguments, __33, 4, __frame, function __$__33() {













      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Inbound NAT rule name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            loadBalancer = new LoadBalancer(cli, networkManagementClient);
            return loadBalancer.setInboundNatRule(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__33() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  lbInboundNatRule.command("list [resource-group] [lb-name]").usage("[options] <resource-group> <lb-name>").description($("Get all load balancing inbound NAT rules of load balancer")).option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __34(resourceGroup, lbName, options, _) { var networkManagementClient, loadBalancer; var __frame = { name: "__34", line: 704 }; return __func(_, this, arguments, __34, 3, __frame, function __$__34() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;

          networkManagementClient = getNetworkManagementClient(options);
          loadBalancer = new LoadBalancer(cli, networkManagementClient);
          return loadBalancer.listInboundNatRules(resourceGroup, lbName, options, __cb(_, __frame, 6, 19, function __$__34() { _(); }, true)); }, true)); }, true)); }); });


  lbInboundNatRule.command("delete [resource-group] [lb-name] [name]").usage("[options] <resource-group> <lb-name> <name>").description($("Delete a load balancing inbound NAT rule from a load balancer")).option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the inbound NAT rule")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __35(resourceGroup, lbName, name, options, _) { var networkManagementClient, loadBalancer; var __frame = { name: "__35", line: 721 }; return __func(_, this, arguments, __35, 4, __frame, function __$__35() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Inbound NAT rule name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            loadBalancer = new LoadBalancer(cli, networkManagementClient);
            return loadBalancer.deleteInboundNatRule(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__35() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var lbInboundNatPool = lb.category("inbound-nat-pool").description($("Commands to manage load balancer inbound NAT pools"));


  lbInboundNatPool.command("create [resource-group] [lb-name] [name]").description($("Add a load balancing inbound NAT pool to the load balancer")).usage("[options] <resource-group> <lb-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the inbound NAT pool")).option("-p, --protocol <protocol>", util.format($("the pool protocol [%s]"), constants.lb.protocols)).option("-f, --frontend-port-range-start  <frontend-port-range-start>", util.format($("the frontend port range start %s"), utils.toRange(constants.portBounds))).option("-e, --frontend-port-range-end <frontend-port-range-end>", util.format($("the frontend port range end %s"), utils.toRange(constants.portBounds))).option("-b, --backend-port <backend-port>", util.format($("the backend port %s"), utils.toRange(constants.portBounds))).option("-i, --frontend-ip-name <frontend-ip-name>", $("the name of the frontend ip configuration")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __36(resourceGroup, lbName, name, options, _) { var networkManagementClient, loadBalancer; var __frame = { name: "__36", line: 746 }; return __func(_, this, arguments, __36, 4, __frame, function __$__36() {












      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Inbound NAT pool name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            loadBalancer = new LoadBalancer(cli, networkManagementClient);
            return loadBalancer.createInboundNatPool(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__36() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  lbInboundNatPool.command("set [resource-group] [lb-name] [name]").usage("[options] <resource-group> <lb-name> <name>").description($("Set a load balancing inbound NAT pool of load balancer")).option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the inbound NAT pool")).option("-p, --protocol <protocol>", util.format($("the pool protocol [%s]"), constants.lb.protocols)).option("-f, --frontend-port-range-start  <frontend-port-range-start>", util.format($("the frontend port range start %s"), utils.toRange(constants.portBounds))).option("-e, --frontend-port-range-end <frontend-port-range-end>", util.format($("the frontend port range end %s"), utils.toRange(constants.portBounds))).option("-b, --backend-port <backend-port>", util.format($("the backend port %s"), utils.toRange(constants.portBounds))).option("-i, --frontend-ip-name <frontend-ip-name>", $("the name of the frontend ip configuration")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __37(resourceGroup, lbName, name, options, _) { var networkManagementClient, loadBalancer; var __frame = { name: "__37", line: 768 }; return __func(_, this, arguments, __37, 4, __frame, function __$__37() {












      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Inbound NAT pool name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            loadBalancer = new LoadBalancer(cli, networkManagementClient);
            return loadBalancer.setInboundNatPool(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__37() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  lbInboundNatPool.command("list [resource-group] [lb-name]").usage("[options] <resource-group> <lb-name>").description($("Get all load balancing inbound NAT pools of load balancer")).option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __38(resourceGroup, lbName, options, _) { var networkManagementClient, loadBalancer; var __frame = { name: "__38", line: 784 }; return __func(_, this, arguments, __38, 3, __frame, function __$__38() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;

          networkManagementClient = getNetworkManagementClient(options);
          loadBalancer = new LoadBalancer(cli, networkManagementClient);
          return loadBalancer.listInboundNatPools(resourceGroup, lbName, options, __cb(_, __frame, 6, 19, function __$__38() { _(); }, true)); }, true)); }, true)); }); });


  lbInboundNatPool.command("delete [resource-group] [lb-name] [name]").usage("[options] <resource-group> <lb-name> <name>").description($("Delete a load balancing inbound NAT pool from a load balancer")).option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the inbound NAT pool")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __39(resourceGroup, lbName, name, options, _) { var networkManagementClient, loadBalancer; var __frame = { name: "__39", line: 801 }; return __func(_, this, arguments, __39, 4, __frame, function __$__39() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Inbound NAT pool name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            loadBalancer = new LoadBalancer(cli, networkManagementClient);
            return loadBalancer.deleteInboundNatPool(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__39() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var publicip = network.category("public-ip").description($("Commands to manage public ip addresses"));


  publicip.command("create [resource-group] [name] [location]").description($("Create a public ip address")).usage("[options] <resource-group> <name> <location>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the public ip")).option("-l, --location <location>", $("the location")).option("-d, --domain-name-label <domain-name-label>", $(("the domain name label." + "\n     This set DNS to <domain-name-label>.<location>.cloudapp.azure.com"))).option("-a, --allocation-method <allocation-method>", util.format($(("the allocation method, valid values are" + "\n     [%s], default is %s")), constants.publicIp.allocation, constants.publicIp.allocation[0])).option("-i, --idle-timeout <idle-timeout>", $("the idle timeout specified in minutes")).option("-f, --reverse-fqdn <reverse-fqdn>", $("the reverse fqdn")).option("-e, --ip-version <ip-version>", util.format($(("the ip version, valid values are" + "\n     [%s], default is %s")), constants.publicIp.version, constants.publicIp.version[0])).option("-t, --tags <tags>", $(constants.help.tags.create)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __40(resourceGroup, name, location, options, _) { var networkManagementClient, publicip; var __frame = { name: "__40", line: 830 }; return __func(_, this, arguments, __40, 4, __frame, function __$__40() {
















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Public IP name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Location: "), location, __cb(_, __frame, 3, 41, function ___(__0, __3) { options.location = __3;

            networkManagementClient = getNetworkManagementClient(options);
            publicip = new PublicIp(cli, networkManagementClient);
            return publicip.create(resourceGroup, name, options, __cb(_, __frame, 7, 15, function __$__40() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  publicip.command("set [resource-group] [name]").description($("Set a public ip address")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the public ip")).option("-d, --domain-name-label [domain-name-label]", $(("the domain name label." + "\n     This set DNS to <domain-name-label>.<location>.cloudapp.azure.com"))).option("-a, --allocation-method <allocation-method>", util.format($(("the allocation method, valid values are" + "\n     [%s], default is %s")), constants.publicIp.allocation, constants.publicIp.allocation[0])).option("-i, --idle-timeout <idle-timeout>", $("the idle timeout specified in minutes")).option("-f, --reverse-fqdn <reverse-fqdn>", $("the reverse fqdn")).option("-t, --tags [tags]", $(constants.help.tags.set)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __41(resourceGroup, name, options, _) { var networkManagementClient, publicip; var __frame = { name: "__41", line: 853 }; return __func(_, this, arguments, __41, 3, __frame, function __$__41() {













      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Public IP name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          publicip = new PublicIp(cli, networkManagementClient);
          return publicip.set(resourceGroup, name, options, __cb(_, __frame, 6, 15, function __$__41() { _(); }, true)); }, true)); }, true)); }); });


  publicip.command("list [resource-group]").description($("Get all public ip addresses")).usage("[options] [resource-group]").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __42(resourceGroup, options, _) { var networkManagementClient, publicip; var __frame = { name: "__42", line: 867 }; return __func(_, this, arguments, __42, 2, __frame, function __$__42() {





      options.resourceGroup = resourceGroup;
      networkManagementClient = getNetworkManagementClient(options);
      publicip = new PublicIp(cli, networkManagementClient);
      return publicip.list(options, __cb(_, __frame, 4, 15, function __$__42() { _(); }, true)); }); });


  publicip.command("show [resource-group] [name]").description($("Get a public ip address")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the public IP")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __43(resourceGroup, name, options, _) { var networkManagementClient, publicip; var __frame = { name: "__43", line: 880 }; return __func(_, this, arguments, __43, 3, __frame, function __$__43() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Public IP name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          publicip = new PublicIp(cli, networkManagementClient);
          return publicip.show(resourceGroup, name, options, __cb(_, __frame, 6, 15, function __$__43() { _(); }, true)); }, true)); }, true)); }); });


  publicip.command("delete [resource-group] [name]").description($("Delete a public ip address")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the public IP")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __44(resourceGroup, name, options, _) { var networkManagementClient, publicip; var __frame = { name: "__44", line: 896 }; return __func(_, this, arguments, __44, 3, __frame, function __$__44() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Public IP name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          publicip = new PublicIp(cli, networkManagementClient);
          return publicip.delete(resourceGroup, name, options, __cb(_, __frame, 6, 15, function __$__44() { _(); }, true)); }, true)); }, true)); }); });


  var nic = network.category("nic").description($("Commands to manage network interfaces"));


  nic.command("create [resource-group] [name] [location]").description($("Create a network interface")).usage("[options] <resource-group> <name> <location>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the network interface")).option("-l, --location <location>", $("the location")).option("-u, --subnet-id <subnet-id>", util.format($(("the subnet identifier." + "\n     e.g. %s")), constants.help.id.subnet)).option("-k, --subnet-name <subnet-name>", $("the subnet name")).option("-m, --subnet-vnet-name <subnet-vnet-name>", $("the vnet name under which subnet-name exists")).option("-w, --network-security-group-id <network-security-group-id>", util.format($(("the network security group identifier." + "\n     e.g. %s")), constants.help.id.nsg)).option("-o, --network-security-group-name <network-security-group-name>", $((("the network security group name." + "\n     This network security group must exist in the same resource group as the nic.") + "\n     Please use network-security-group-id if that is not the case."))).option("-i, --public-ip-id <public-ip-id>", util.format($(("the public ip identifier." + "\n     e.g. %s")), constants.help.id.publicIp)).option("-p, --public-ip-name <public-ip-name>", $((("the public ip name." + "\n     This public ip must exist in the same resource group as the nic.") + "\n     Please use public-ip-id if that is not the case."))).option("-d, --lb-address-pool-ids <lb-address-pool-ids>", util.format($(("the comma separated list of load balancer address pool identifiers" + "\n     e.g. %s")), constants.help.id.lbAddressPool)).option("-e, --lb-inbound-nat-rule-ids <lb-inbound-nat-rule-ids>", util.format($(("the comma separated list of load balancer inbound NAT rule identifiers" + "\n     e.g. %s")), constants.help.id.lbInboundNatRule)).option("-a, --private-ip-address <private-ip-address>", $("the private ip address")).option("-b, --private-ip-version <private-ip-version>", util.format($(("the private ip version, valid values are" + "\n     [%s], default is %s")), constants.publicIp.version, constants.publicIp.version[0])).option("-r, --internal-dns-name-label <internal-dns-name-label>", $("the internal DNS name label")).option("-f, --enable-ip-forwarding <enable-ip-forwarding>", util.format($("enable ip forwarding [%s]"), constants.bool)).option("-t, --tags <tags>", $(constants.help.tags.create)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __45(resourceGroup, name, location, options, _) { var networkManagementClient, nic; var __frame = { name: "__45", line: 939 }; return __func(_, this, arguments, __45, 4, __frame, function __$__45() {































      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network interface name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Location: "), location, __cb(_, __frame, 3, 41, function ___(__0, __3) { options.location = __3;

            networkManagementClient = getNetworkManagementClient(options);
            nic = new Nic(cli, networkManagementClient);
            return nic.create(resourceGroup, name, options, __cb(_, __frame, 7, 10, function __$__45() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  nic.command("set [resource-group] [name]").description($("Set a network interface")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the network interface")).option("-w, --network-security-group-id [network-security-group-id]", util.format($(("the network security group identifier." + "\n     e.g. %s")), constants.help.id.nsg)).option("-o, --network-security-group-name [network-security-group-name]", $((("the network security group name." + "\n     This network security group must exist in the same resource group as the nic.") + "\n     Please use network-security-group-id if that is not the case."))).option("-r, --internal-dns-name-label [internal-dns-name-label]", $("the internal DNS name label")).option("-f, --enable-ip-forwarding <enable-ip-forwarding>", util.format($("enable ip forwarding [%s]"), constants.bool)).option("-t, --tags [tags]", $(constants.help.tags.set)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __46(resourceGroup, name, options, _) { var networkManagementClient, nic; var __frame = { name: "__46", line: 963 }; return __func(_, this, arguments, __46, 3, __frame, function __$__46() {














      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network interface name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          nic = new Nic(cli, networkManagementClient);
          return nic.set(resourceGroup, name, options, __cb(_, __frame, 6, 10, function __$__46() { _(); }, true)); }, true)); }, true)); }); });


  nic.command("list [resource-group]").description($("Get all network interfaces")).usage("[options] [resource-group]").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-m, --virtual-machine-scale-set-name <virtual-machine-scale-set-name>", $("the name of the virtual machine scale set")).option("-i, --virtual-machine-index <virtual-machine-index>", $("the index of the virtual machine in scale set")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __47(resourceGroup, options, _) { var networkManagementClient, nic; var __frame = { name: "__47", line: 979 }; return __func(_, this, arguments, __47, 2, __frame, function __$__47() {







      options.resourceGroup = resourceGroup;
      networkManagementClient = getNetworkManagementClient(options);
      nic = new Nic(cli, networkManagementClient);
      return nic.list(options, __cb(_, __frame, 4, 10, function __$__47() { _(); }, true)); }); });


  nic.command("show [resource-group] [name]").description($("Get a network interface")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the network interface")).option("-m, --virtual-machine-scale-set-name <virtual-machine-scale-set-name>", $("the name of the virtual machine scale set")).option("-i, --virtual-machine-index <virtual-machine-index>", $("the index of virtual machine in scale set")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __48(resourceGroup, name, options, _) { var networkManagementClient, nic; var __frame = { name: "__48", line: 994 }; return __func(_, this, arguments, __48, 3, __frame, function __$__48() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network interface name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          nic = new Nic(cli, networkManagementClient);
          return nic.show(resourceGroup, name, options, __cb(_, __frame, 6, 10, function __$__48() { _(); }, true)); }, true)); }, true)); }); });


  nic.command("delete [resource-group] [name]").description($("Delete a network interface")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the network interface")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __49(resourceGroup, name, options, _) { var networkManagementClient, nic; var __frame = { name: "__49", line: 1010 }; return __func(_, this, arguments, __49, 3, __frame, function __$__49() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network interface name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          nic = new Nic(cli, networkManagementClient);
          return nic.delete(resourceGroup, name, options, __cb(_, __frame, 6, 10, function __$__49() { _(); }, true)); }, true)); }, true)); }); });


  var nicIpConfig = nic.category("ip-config").description($("Commands to manage network interface ip configurations"));


  nicIpConfig.command("create [resource-group] [nic-name] [name]").description($("Create a network interface ip configuration")).usage("[options] <resource-group> <nic-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-c, --nic-name <nic-name>", $("the name of the network interface")).option("-n, --name <name>", $("the name of the ip configuration")).option("-u, --subnet-id <subnet-id>", util.format($(("the subnet identifier." + "\n     e.g. %s")), constants.help.id.subnet)).option("-k, --subnet-name <subnet-name>", $("the subnet name")).option("-m, --subnet-vnet-name <subnet-vnet-name>", $("the vnet name under which subnet-name exists")).option("-i, --public-ip-id <public-ip-id>", util.format($(("the public IP identifier." + "\n     e.g. %s")), constants.help.id.publicIp)).option("-p, --public-ip-name <public-ip-name>", $((("the public IP name." + "\n     This public ip must exist in the same resource group as the nic.") + "\n     Please use public-ip-id if that is not the case."))).option("-d, --lb-address-pool-ids <lb-address-pool-ids>", util.format($(("the comma separated list of load balancer address pool identifiers" + "\n     e.g. %s")), constants.help.id.lbAddressPool)).option("-e, --lb-inbound-nat-rule-ids <lb-inbound-nat-rule-ids>", util.format($(("the comma separated list of load balancer inbound NAT rule identifiers" + "\n     e.g. %s")), constants.help.id.lbInboundNatRule)).option("-a, --private-ip-address <private-ip-address>", $("the private ip address")).option("-b, --private-ip-version <private-ip-version>", util.format($(("the private ip version, valid values are" + "\n     [%s], default is %s")), constants.publicIp.version, constants.publicIp.version[0])).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __50(resourceGroup, nicName, name, options, _) { var networkManagementClient, nic; var __frame = { name: "__50", line: 1045 }; return __func(_, this, arguments, __50, 4, __frame, function __$__50() {























      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network interface name: "), nicName, __cb(_, __frame, 2, 32, function ___(__0, __2) { nicName = __2;
          return cli.interaction.promptIfNotGiven($("IP configuration name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            nic = new Nic(cli, networkManagementClient);
            return nic.createIpConfig(resourceGroup, nicName, name, options, __cb(_, __frame, 7, 10, function __$__50() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  nicIpConfig.command("set [resource-group] [nic-name] [name]").description($("Set a network interface ip configuration")).usage("[options] <resource-group> <nic-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-c, --nic-name <nic-name>", $("the name of the network interface")).option("-n, --name <name>", $("the name of the ip configuration")).option("-u, --subnet-id <subnet-id>", util.format($(("the subnet identifier." + "\n     e.g. %s")), constants.help.id.subnet)).option("-k, --subnet-name <subnet-name>", $("the subnet name")).option("-m, --subnet-vnet-name <subnet-vnet-name>", $("the vnet name under which subnet-name exists")).option("-i, --public-ip-id <public-ip-id>", util.format($(("the public IP identifier." + "\n     e.g. %s")), constants.help.id.publicIp)).option("-p, --public-ip-name <public-ip-name>", $((("the public IP name." + "\n     This public ip must exist in the same resource group as the nic.") + "\n     Please use public-ip-id if that is not the case."))).option("-d, --lb-address-pool-ids [lb-address-pool-ids]", util.format($(("the comma separated list of load balancer address pool identifiers" + "\n     e.g. %s")), constants.help.id.lbAddressPool)).option("-e, --lb-inbound-nat-rule-ids [lb-inbound-nat-rule-ids]", util.format($(("the comma separated list of load balancer inbound NAT rule identifiers" + "\n     e.g. %s")), constants.help.id.lbInboundNatRule)).option("-a, --private-ip-address <private-ip-address>", $("the private ip address")).option("-b, --private-ip-version <private-ip-version>", util.format($(("the private ip version, valid values are" + "\n     [%s]")), constants.publicIp.version)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __51(resourceGroup, nicName, name, options, _) { var networkManagementClient, nic; var __frame = { name: "__51", line: 1078 }; return __func(_, this, arguments, __51, 4, __frame, function __$__51() {























      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network interface name: "), nicName, __cb(_, __frame, 2, 32, function ___(__0, __2) { nicName = __2;
          return cli.interaction.promptIfNotGiven($("IP configuration name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            nic = new Nic(cli, networkManagementClient);
            return nic.setIpConfig(resourceGroup, nicName, name, options, __cb(_, __frame, 7, 10, function __$__51() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  nicIpConfig.command("list [resource-group] [nic-name]").description($("List a network interface ip configurations")).usage("[options] <resource-group> <nic-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-c, --nic-name <nic-name>", $("the name of the network interface")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __52(resourceGroup, nicName, options, _) { var networkManagementClient, nic; var __frame = { name: "__52", line: 1094 }; return __func(_, this, arguments, __52, 3, __frame, function __$__52() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network interface name: "), nicName, __cb(_, __frame, 2, 32, function ___(__0, __2) { nicName = __2;

          networkManagementClient = getNetworkManagementClient(options);
          nic = new Nic(cli, networkManagementClient);
          return nic.listIpConfigs(resourceGroup, nicName, options, __cb(_, __frame, 6, 10, function __$__52() { _(); }, true)); }, true)); }, true)); }); });


  nicIpConfig.command("show [resource-group] [nic-name] [name]").description($("Get details of a network interface ip configuration")).usage("[options] <resource-group> <nic-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-c, --nic-name <nic-name>", $("the name of the network interface")).option("-n, --name <name>", $("the name of the ip configuration")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __53(resourceGroup, nicName, name, options, _) { var networkManagementClient, nic; var __frame = { name: "__53", line: 1110 }; return __func(_, this, arguments, __53, 4, __frame, function __$__53() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network interface name: "), nicName, __cb(_, __frame, 2, 32, function ___(__0, __2) { nicName = __2;
          return cli.interaction.promptIfNotGiven($("IP configuration name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            nic = new Nic(cli, networkManagementClient);
            return nic.showIpConfig(resourceGroup, nicName, name, options, __cb(_, __frame, 7, 10, function __$__53() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  nicIpConfig.command("delete [resource-group] [nic-name] [name]").description($("Delete a network interface ip configuration")).usage("[options] <resource-group> <nic-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-c, --nic-name <nic-name>", $("the name of the network interface")).option("-n, --name <name>", $("the name of the ip configuration")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __54(resourceGroup, nicName, name, options, _) { var networkManagementClient, nic; var __frame = { name: "__54", line: 1128 }; return __func(_, this, arguments, __54, 4, __frame, function __$__54() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network interface name: "), nicName, __cb(_, __frame, 2, 32, function ___(__0, __2) { nicName = __2;
          return cli.interaction.promptIfNotGiven($("IP configuration name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            nic = new Nic(cli, networkManagementClient);
            return nic.deleteIpConfig(resourceGroup, nicName, name, options, __cb(_, __frame, 7, 10, function __$__54() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var nicAddressPool = nicIpConfig.category("address-pool").description($("Commands to manage backend address pools of the network interface ip configuration"));


  nicAddressPool.command("create [resource-group] [nic-name] [ip-config-name]").description($("Add a backend address pool to a NIC ip configuration")).usage("[options] <resource-group> <nic-name> <ip-config-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-c, --nic-name <nic-name>", $("the name of the network interface")).option("-n, --ip-config-name <ip-config-name>", $("the name of ip configuration")).option("-i, --lb-address-pool-id <lb-address-pool-id>", util.format($(("the load balancer backend address pool identifier" + "\n   e.g. %s")), constants.help.id.lbAddressPool)).option("-l, --lb-name <lb-name>", $(("the load balancer name." + "\n   This load balancer must exists in the same resource group as the NIC."))).option("-a, --lb-address-pool-name <lb-address-pool-name>", $(("the name of the address pool that exists in the load balancer" + "\n   Please use --lb-address-pool-id if that is not the case."))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __55(resourceGroup, nicName, ipConfigName, options, _) { var networkManagementClient, nic; var __frame = { name: "__55", line: 1154 }; return __func(_, this, arguments, __55, 4, __frame, function __$__55() {













      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network interface name: "), nicName, __cb(_, __frame, 2, 32, function ___(__0, __2) { nicName = __2;
          ipConfigName = (ipConfigName || options.ipConfigName);

          networkManagementClient = getNetworkManagementClient(options);
          nic = new Nic(cli, networkManagementClient);
          return nic.createBackendAddressPool(resourceGroup, nicName, ipConfigName, options, __cb(_, __frame, 7, 10, function __$__55() { _(); }, true)); }, true)); }, true)); }); });


  nicAddressPool.command("delete [resource-group] [nic-name] [ip-config-name]").description($("Delete a backend address pool from a NIC ip configuration")).usage("[options] <resource-group> <nic-name> <ip-config-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-c, --nic-name <nic-name>", $("the name of the network interface")).option("-n, --ip-config-name <ip-config-name>", $("the name of ip configuration")).option("-i, --lb-address-pool-id <lb-address-pool-id>", util.format($(("the load balancer backend address pool identifier" + "\n   e.g. %s")), constants.help.id.lbAddressPool)).option("-l, --lb-name <lb-name>", $(("the load balancer name." + "\n   This load balancer must exists in the same resource group as the NIC."))).option("-a, --lb-address-pool-name <lb-address-pool-name>", $(("the name of the address pool that exists in the load balancer" + "\n   Please use --lb-address-pool-id if that is not the case."))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __56(resourceGroup, nicName, ipConfigName, options, _) { var networkManagementClient, nic; var __frame = { name: "__56", line: 1177 }; return __func(_, this, arguments, __56, 4, __frame, function __$__56() {













      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network interface name: "), nicName, __cb(_, __frame, 2, 32, function ___(__0, __2) { nicName = __2;
          ipConfigName = (ipConfigName || options.ipConfigName);

          networkManagementClient = getNetworkManagementClient(options);
          nic = new Nic(cli, networkManagementClient);
          return nic.deleteBackendAddressPool(resourceGroup, nicName, ipConfigName, options, __cb(_, __frame, 7, 10, function __$__56() { _(); }, true)); }, true)); }, true)); }); });


  var nicInboundRule = nicIpConfig.category("inbound-nat-rule").description($("Commands to manage inbound NAT rules of the network interface ip configuration"));


  nicInboundRule.command("create [resource-group] [nic-name] [ip-config-name]").description($("Add an inbound NAT rule to a NIC ip configuration")).usage("[options] <resource-group> <nic-name> <ip-config-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-c, --nic-name <nic-name>", $("the name of the network interface")).option("-n, --ip-config-name <ip-config-name>", $("the name of ip configuration")).option("-i, --lb-inbound-nat-rule-id <lb-inbound-nat-rule-id>", util.format($(("the inbound NAT rule identifier." + "\n   e.g. %s")), constants.help.id.lbInboundNatRule)).option("-l, --lb-name <lb-name>", $(("the load balancer name." + "\n   This load balancer must exists in the same resource group as the NIC."))).option("-r, --lb-inbound-nat-rule-name <lb-inbound-nat-rule-name>", $(("the name of the inbound NAT rule that exists in the load balancer." + "\n   Please use --inbound-nat-rule-id if that is not the case."))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __57(resourceGroup, nicName, ipConfigName, options, _) { var networkManagementClient, nic; var __frame = { name: "__57", line: 1203 }; return __func(_, this, arguments, __57, 4, __frame, function __$__57() {













      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network interface name: "), nicName, __cb(_, __frame, 2, 32, function ___(__0, __2) { nicName = __2;
          ipConfigName = (ipConfigName || options.ipConfigName);

          networkManagementClient = getNetworkManagementClient(options);
          nic = new Nic(cli, networkManagementClient);
          return nic.createInboundNatRule(resourceGroup, nicName, ipConfigName, options, __cb(_, __frame, 7, 10, function __$__57() { _(); }, true)); }, true)); }, true)); }); });


  nicInboundRule.command("delete [resource-group] [nic-name] [ip-config-name]").description($("Delete an inbound NAT rule from a NIC ip configuration")).usage("[options] <resource-group> <nic-name> <ip-config-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-c, --nic-name <nic-name>", $("the name of the network interface")).option("-n, --ip-config-name <ip-config-name>", $("the name of ip configuration")).option("-i, --lb-inbound-nat-rule-id <lb-inbound-nat-rule-id>", util.format($(("the inbound NAT rule identifier." + "\n   e.g. %s")), constants.help.id.lbInboundNatRule)).option("-l, --lb-name <lb-name>", $(("the load balancer name." + "\n   This load balancer must exists in the same resource group as the NIC."))).option("-r, --lb-inbound-nat-rule-name <lb-inbound-nat-rule-name>", $(("the name of the inbound NAT rule that exists in the load balancer." + "\n   Please use --inbound-nat-rule-id if that is not the case."))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __58(resourceGroup, nicName, ipConfigName, options, _) { var networkManagementClient, nic; var __frame = { name: "__58", line: 1226 }; return __func(_, this, arguments, __58, 4, __frame, function __$__58() {













      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network interface name: "), nicName, __cb(_, __frame, 2, 32, function ___(__0, __2) { nicName = __2;
          ipConfigName = (ipConfigName || options.ipConfigName);

          networkManagementClient = getNetworkManagementClient(options);
          nic = new Nic(cli, networkManagementClient);
          return nic.deleteInboundNatRule(resourceGroup, nicName, ipConfigName, options, __cb(_, __frame, 7, 10, function __$__58() { _(); }, true)); }, true)); }, true)); }); });


  var nsg = network.category("nsg").description($("Commands to manage network security groups"));


  nsg.command("create [resource-group] [name] [location]").description($("Create a network security group")).usage("[options] <resource-group> <name> <location>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the network security group")).option("-l, --location <location>", $("the location")).option("-t, --tags <tags>", $(constants.help.tags.create)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __59(resourceGroup, name, location, options, _) { var networkManagementClient, nsg; var __frame = { name: "__59", line: 1247 }; return __func(_, this, arguments, __59, 4, __frame, function __$__59() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network security group name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Location: "), location, __cb(_, __frame, 3, 33, function ___(__0, __3) { location = __3;

            networkManagementClient = getNetworkManagementClient(options);
            nsg = new Nsg(cli, networkManagementClient);
            return nsg.create(resourceGroup, name, location, options, __cb(_, __frame, 7, 10, function __$__59() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  nsg.command("set [resource-group] [name]").description($("Set a network security group")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the network security group")).option("-t, --tags [tags]", $(constants.help.tags.set)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __60(resourceGroup, name, options, _) { var networkManagementClient, nsg; var __frame = { name: "__60", line: 1264 }; return __func(_, this, arguments, __60, 3, __frame, function __$__60() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network security group name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          nsg = new Nsg(cli, networkManagementClient);
          return nsg.set(resourceGroup, name, options, __cb(_, __frame, 6, 10, function __$__60() { _(); }, true)); }, true)); }, true)); }); });


  nsg.command("list [resource-group]").description($("Get all network security groups")).usage("[options] [resource-group]").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __61(resourceGroup, options, _) { var networkManagementClient, nsg; var __frame = { name: "__61", line: 1278 }; return __func(_, this, arguments, __61, 2, __frame, function __$__61() {





      options.resourceGroup = resourceGroup;
      networkManagementClient = getNetworkManagementClient(options);
      nsg = new Nsg(cli, networkManagementClient);
      return nsg.list(options, __cb(_, __frame, 4, 10, function __$__61() { _(); }, true)); }); });


  nsg.command("show [resource-group] [name]").description($("Get a network security group")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the network security group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __62(resourceGroup, name, options, _) { var networkManagementClient, nsg; var __frame = { name: "__62", line: 1291 }; return __func(_, this, arguments, __62, 3, __frame, function __$__62() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network security group name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          nsg = new Nsg(cli, networkManagementClient);
          return nsg.show(resourceGroup, name, options, __cb(_, __frame, 6, 10, function __$__62() { _(); }, true)); }, true)); }, true)); }); });


  nsg.command("delete [resource-group] [name]").description($("Delete a network security group")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the network security group")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __63(resourceGroup, name, options, _) { var networkManagementClient, nsg; var __frame = { name: "__63", line: 1307 }; return __func(_, this, arguments, __63, 3, __frame, function __$__63() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network security group name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          nsg = new Nsg(cli, networkManagementClient);
          return nsg.delete(resourceGroup, name, options, __cb(_, __frame, 6, 10, function __$__63() { _(); }, true)); }, true)); }, true)); }); });


  var nsgRule = nsg.category("rule").description($("Commands to manage network security group rules"));


  nsgRule.command("create [resource-group] [nsg-name] [name]").description($("Create a network security group rule")).usage("[options] <resource-group> <nsg-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-a, --nsg-name <nsg-name>", $("the name of the network security group")).option("-n, --name <name>", $("the name of the rule")).option("-d, --description <description>", $("the description")).option("-p, --protocol <protocol>", util.format($("the protocol [%s]"), constants.nsg.protocols)).option("-f, --source-address-prefix <source-address-prefix>", $("the source address prefix")).option("-o, --source-port-range <source-port-range>", util.format($("the source port range [%s-%s]"), constants.nsg.portMin, constants.nsg.portMax)).option("-e, --destination-address-prefix <destination-address-prefix>", $("the destination address prefix")).option("-u, --destination-port-range <destination-port-range>", util.format($("the destination port range [%s-%s]"), constants.nsg.portMin, constants.nsg.portMax)).option("-c, --access <access>", util.format($("the access mode [%s]"), constants.nsg.access)).option("-y, --priority <priority>", util.format($("the priority [%s-%s]"), constants.nsg.priority.min, constants.nsg.priority.max)).option("-r, --direction <direction>", util.format($("the direction [%s]"), constants.nsg.direction)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __64(resourceGroup, nsgName, name, options, _) { var networkManagementClient, nsg; var __frame = { name: "__64", line: 1335 }; return __func(_, this, arguments, __64, 4, __frame, function __$__64() {
















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network security group name: "), nsgName, __cb(_, __frame, 2, 32, function ___(__0, __2) { nsgName = __2;
          return cli.interaction.promptIfNotGiven($("The name of the security rule: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("Priority: "), options.priority, __cb(_, __frame, 4, 41, function ___(__0, __4) { options.priority = __4;

              networkManagementClient = getNetworkManagementClient(options);
              nsg = new Nsg(cli, networkManagementClient);
              return nsg.createRule(resourceGroup, nsgName, name, options, __cb(_, __frame, 8, 10, function __$__64() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  nsgRule.command("set [resource-group] [nsg-name] [name]").description($("Set a network security group rule")).usage("[options] <resource-group> <nsg-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-a, --nsg-name <nsg-name>", $("the name of the network security group")).option("-n, --name <name>", $("the name of the rule")).option("-d, --description <description>", $("the description")).option("-p, --protocol <protocol>", util.format($("the protocol [%s]"), constants.nsg.protocols)).option("-f, --source-address-prefix <source-address-prefix>", $("the source address prefix")).option("-o, --source-port-range <source-port-range>", util.format($("the source port range [%s-%s]"), constants.nsg.portMin, constants.nsg.portMax)).option("-e, --destination-address-prefix <destination-address-prefix>", $("the destination address prefix")).option("-u, --destination-port-range <destination-port-range>", util.format($("the destination port range [%s-%s]"), constants.nsg.portMin, constants.nsg.portMax)).option("-c, --access <access>", util.format($("the access mode [%s]"), constants.nsg.access)).option("-y, --priority <priority>", util.format($("the priority [%s-%s]"), constants.nsg.priorityMin, constants.nsg.priorityMax)).option("-r, --direction <direction>", util.format($("the direction [%s]"), constants.nsg.direction)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __65(resourceGroup, nsgName, name, options, _) { var networkManagementClient, nsg; var __frame = { name: "__65", line: 1362 }; return __func(_, this, arguments, __65, 4, __frame, function __$__65() {
















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network security group name: "), nsgName, __cb(_, __frame, 2, 32, function ___(__0, __2) { nsgName = __2;
          return cli.interaction.promptIfNotGiven($("The name of the security rule: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            nsg = new Nsg(cli, networkManagementClient);
            return nsg.setRule(resourceGroup, nsgName, name, options, __cb(_, __frame, 7, 10, function __$__65() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  nsgRule.command("list [resource-group] [nsg-name]").description($("Get all rules in a network security group")).usage("[options] <resource-group> <nsg-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-a, --nsg-name <nsg-name>", $("the name of the network security group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __66(resourceGroup, nsgName, options, _) { var networkManagementClient, nsg; var __frame = { name: "__66", line: 1378 }; return __func(_, this, arguments, __66, 3, __frame, function __$__66() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network security group name: "), nsgName, __cb(_, __frame, 2, 32, function ___(__0, __2) { nsgName = __2;

          networkManagementClient = getNetworkManagementClient(options);
          nsg = new Nsg(cli, networkManagementClient);
          return nsg.listRules(resourceGroup, nsgName, options, __cb(_, __frame, 6, 10, function __$__66() { _(); }, true)); }, true)); }, true)); }); });


  nsgRule.command("show [resource-group] [nsg-name] [name]").description($("Get a rule in a network security group")).usage("[options] <resource-group> <nsg-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-a, --nsg-name <nsg-name>", $("the name of the network security group")).option("-n, --name <name>", $("the name of the rule")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __67(resourceGroup, nsgName, name, options, _) { var networkManagementClient, nsg; var __frame = { name: "__67", line: 1394 }; return __func(_, this, arguments, __67, 4, __frame, function __$__67() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network security group name: "), nsgName, __cb(_, __frame, 2, 32, function ___(__0, __2) { nsgName = __2;
          return cli.interaction.promptIfNotGiven($("Rule name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            nsg = new Nsg(cli, networkManagementClient);
            return nsg.showRule(resourceGroup, nsgName, name, options, __cb(_, __frame, 7, 10, function __$__67() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  nsgRule.command("delete [resource-group] [nsg-name] [name]").description($("Delete a rule in a network security group")).usage("[options] <resource-group> <nsg-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-a, --nsg-name <nsg-name>", $("the name of the network security group")).option("-n, --name <name>", $("the name of the rule")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __68(resourceGroup, nsgName, name, options, _) { var networkManagementClient, nsg; var __frame = { name: "__68", line: 1412 }; return __func(_, this, arguments, __68, 4, __frame, function __$__68() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network security group name: "), nsgName, __cb(_, __frame, 2, 32, function ___(__0, __2) { nsgName = __2;
          return cli.interaction.promptIfNotGiven($("Rule name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            nsg = new Nsg(cli, networkManagementClient);
            return nsg.deleteRule(resourceGroup, nsgName, name, options, __cb(_, __frame, 7, 10, function __$__68() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var dns = network.category("dns").description($("Commands to manage DNS"));


  var dnsZone = dns.category("zone").description($("Commands to manage DNS zone"));


  dnsZone.command("create [resource-group] [name]").description($("Create a DNS zone")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the DNS zone")).option("-t, --tags <tags>", $(constants.help.tags.create)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __69(resourceGroup, name, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__69", line: 1435 }; return __func(_, this, arguments, __69, 3, __frame, function __$__69() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          dnsManagementClient = getDnsManagementClient(options);
          dnsZone = new DnsZone(cli, dnsManagementClient);
          return dnsZone.create(resourceGroup, name, options, __cb(_, __frame, 6, 14, function __$__69() { _(); }, true)); }, true)); }, true)); }); });


  dnsZone.command("set [resource-group] [name]").description($("Set a DNS zone")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the DNS zone")).option("-t, --tags [tags]", $(constants.help.tags.set)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __70(resourceGroup, name, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__70", line: 1451 }; return __func(_, this, arguments, __70, 3, __frame, function __$__70() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          dnsManagementClient = getDnsManagementClient(options);
          dnsZone = new DnsZone(cli, dnsManagementClient);
          return dnsZone.set(resourceGroup, name, options, __cb(_, __frame, 6, 14, function __$__70() { _(); }, true)); }, true)); }, true)); }); });


  dnsZone.command("list [resource-group]").description($("Get all DNS zones")).usage("[options] <resource-group>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __71(resourceGroup, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__71", line: 1465 }; return __func(_, this, arguments, __71, 2, __frame, function __$__71() {





      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;

        dnsManagementClient = getDnsManagementClient(options);
        dnsZone = new DnsZone(cli, dnsManagementClient);
        return dnsZone.list(resourceGroup, options, __cb(_, __frame, 5, 14, function __$__71() { _(); }, true)); }, true)); }); });


  dnsZone.command("show [resource-group] [name]").description($("Get a DNS zone")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $(("the name of the DNS zone" + "\n   You can specify \"*\" (in quotes) for this parameter"))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __72(resourceGroup, name, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__72", line: 1480 }; return __func(_, this, arguments, __72, 3, __frame, function __$__72() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          dnsManagementClient = getDnsManagementClient(options);
          dnsZone = new DnsZone(cli, dnsManagementClient);
          return dnsZone.show(resourceGroup, name, options, __cb(_, __frame, 6, 14, function __$__72() { _(); }, true)); }, true)); }, true)); }); });


  dnsZone.command("delete [resource-group] [name]").description($("Delete a DNS zone")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the DNS zone")).option("-s, --subscription <subscription>", $("the subscription identifier")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __73(resourceGroup, name, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__73", line: 1497 }; return __func(_, this, arguments, __73, 3, __frame, function __$__73() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          dnsManagementClient = getDnsManagementClient(options);
          dnsZone = new DnsZone(cli, dnsManagementClient);
          return dnsZone.delete(resourceGroup, name, options, __cb(_, __frame, 6, 14, function __$__73() { _(); }, true)); }, true)); }, true)); }); });


  dnsZone.command("import [resource-group] [name] [file-name]").description($("Import a DNS zone")).usage("[options] <resource-group> <name> <file-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the DNS zone")).option("-f, --file-name <file-name>", $("the name of the zone file")).option("--force", $("force overwrite of existing record sets. Otherwise, records are merged with existing record sets")).option("--debug", $("output debug info")).option("--parse-only", $("parse zone file only, without import")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __74(resourceGroup, name, fileName, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__74", line: 1516 }; return __func(_, this, arguments, __74, 4, __frame, function __$__74() {










      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Zone file name: "), fileName, __cb(_, __frame, 3, 41, function ___(__0, __3) { options.fileName = __3;

            dnsManagementClient = getDnsManagementClient(options);
            dnsZone = new DnsZone(cli, dnsManagementClient);
            return dnsZone.import(resourceGroup, name, options, __cb(_, __frame, 7, 14, function __$__74() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  dnsZone.command("export [resource-group] [name] [file-name]").description($("Export a DNS zone as a zone file")).usage("[options] <resource-group> <name> <file-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the DNS zone")).option("-f, --file-name <file-name>", $("the name of the zone file")).option("-q, --quiet", $("quiet mode, do not ask for overwrite confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __75(resourceGroup, name, fileName, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__75", line: 1534 }; return __func(_, this, arguments, __75, 4, __frame, function __$__75() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Zone file name: "), fileName, __cb(_, __frame, 3, 41, function ___(__0, __3) { options.fileName = __3;

            dnsManagementClient = getDnsManagementClient(options);
            dnsZone = new DnsZone(cli, dnsManagementClient);
            return dnsZone.export(resourceGroup, name, options, __cb(_, __frame, 7, 14, function __$__75() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var dnsRecordSet = dns.category("record-set").description($("Commands to manage record sets in DNS zone"));


  dnsRecordSet.command("create [resource-group] [dns-zone-name] [name] [type]").description($("Create a DNS zone record set")).usage("[options] <resource-group> <dns-zone-name> <name> <type>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-z, --dns-zone-name <dns-zone-name>", $("the name of the DNS zone")).option("-n, --name <name>", $("the relative name of the record set within the DNS zone")).option("-y, --type <type>", $(("the type of the record set." + "\n     Valid values are [A, AAAA, CNAME, MX, NS, SOA, SRV, TXT, PTR]"))).option("-l, --ttl <ttl>", $("time to live specified in seconds")).option("-t, --tags <tags>", $(constants.help.tags.create)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __76(resourceGroup, dnsZoneName, name, type, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__76", line: 1558 }; return __func(_, this, arguments, __76, 5, __frame, function __$__76() {











      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), dnsZoneName, __cb(_, __frame, 2, 36, function ___(__0, __2) { dnsZoneName = __2;
          return cli.interaction.promptIfNotGiven($("Record set name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("Type: "), type, __cb(_, __frame, 4, 37, function ___(__0, __4) { options.type = __4;

              dnsManagementClient = getDnsManagementClient(options);
              dnsZone = new DnsZone(cli, dnsManagementClient);
              return dnsZone.createRecordSet(resourceGroup, dnsZoneName, name, options, __cb(_, __frame, 8, 14, function __$__76() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  dnsRecordSet.command("set [resource-group] [dns-zone-name] [name] [type]").description($("Set a DNS zone record set")).usage("[options] <resource-group> <dns-zone-name> <name> <type>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-z, --dns-zone-name <dns-zone-name>", $("the name of the DNS zone")).option("-n, --name <name>", $("the relative name of the record set within the DNS zone")).option("-y, --type <type>", $(("the type of the record set." + "\n     Valid values are [A, AAAA, CNAME, MX, NS, SOA, SRV, TXT, PTR]"))).option("-l, --ttl <ttl>", $("time to live specified in seconds")).option("-t, --tags [tags]", $(constants.help.tags.set)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __77(resourceGroup, dnsZoneName, name, type, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__77", line: 1580 }; return __func(_, this, arguments, __77, 5, __frame, function __$__77() {











      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), dnsZoneName, __cb(_, __frame, 2, 36, function ___(__0, __2) { dnsZoneName = __2;
          return cli.interaction.promptIfNotGiven($("Record set name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("Type: "), type, __cb(_, __frame, 4, 37, function ___(__0, __4) { options.type = __4;

              dnsManagementClient = getDnsManagementClient(options);
              dnsZone = new DnsZone(cli, dnsManagementClient);
              return dnsZone.setRecordSet(resourceGroup, dnsZoneName, name, options, __cb(_, __frame, 8, 14, function __$__77() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  dnsRecordSet.command("list [resource-group] [dns-zone-name] [type]").description($("Get all record sets in a DNS zone")).usage("[options] <resource-group> <dns-zone-name> [type]").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-z, --dns-zone-name <dns-zone-name>", $("the name of the DNS zone")).option("-y, --type <type>", $((("the type of the record set." + "\n     If specified only record sets of this type will be listed.") + "\n     Valid values are [A, AAAA, CNAME, MX, NS, SOA, SRV, TXT, PTR]"))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __78(resourceGroup, dnsZoneName, type, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__78", line: 1600 }; return __func(_, this, arguments, __78, 4, __frame, function __$__78() {









      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), dnsZoneName, __cb(_, __frame, 2, 36, function ___(__0, __2) { dnsZoneName = __2;
          options.type = (type || options.type);

          dnsManagementClient = getDnsManagementClient(options);
          dnsZone = new DnsZone(cli, dnsManagementClient);
          return dnsZone.listRecordSets(resourceGroup, dnsZoneName, options, __cb(_, __frame, 7, 14, function __$__78() { _(); }, true)); }, true)); }, true)); }); });


  dnsRecordSet.command("show [resource-group] [dns-zone-name] [name] [type]").description($("Get a record set in a DNS zone")).usage("[options] <resource-group> <dns-zone-name> <name> <type>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-z, --dns-zone-name <dns-zone-name>", $("the name of the DNS zone")).option("-n, --name <name>", $("the relative name of the record set within the DNS zone")).option("-y, --type <type>", $(("the type of the record set." + "\n     Valid values are [A, AAAA, CNAME, MX, NS, SOA, SRV, TXT, PTR]"))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __79(resourceGroup, dnsZoneName, name, type, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__79", line: 1619 }; return __func(_, this, arguments, __79, 5, __frame, function __$__79() {









      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), dnsZoneName, __cb(_, __frame, 2, 36, function ___(__0, __2) { dnsZoneName = __2;
          return cli.interaction.promptIfNotGiven($("Record set name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("Type: "), type, __cb(_, __frame, 4, 37, function ___(__0, __4) { options.type = __4;

              dnsManagementClient = getDnsManagementClient(options);
              dnsZone = new DnsZone(cli, dnsManagementClient);
              return dnsZone.showRecordSet(resourceGroup, dnsZoneName, name, options, __cb(_, __frame, 8, 14, function __$__79() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  dnsRecordSet.command("delete [resource-group] [dns-zone-name] [name] [type]").description($("Delete a record set from a DNS zone")).usage("[options] <resource-group> <dns-zone-name> <name> <type>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-z, --dns-zone-name <dns-zone-name>", $("the name of the DNS zone")).option("-n, --name <name>", $("the relative name of the record set within the DNS zone")).option("-y, --type <type>", $((("the type of the record set." + "\n     If specified only record sets of this type will be listed.") + "\n     Valid values are [A, AAAA, CNAME, MX, NS, SOA, SRV, TXT, PTR]"))).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __80(resourceGroup, dnsZoneName, name, type, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__80", line: 1641 }; return __func(_, this, arguments, __80, 5, __frame, function __$__80() {











      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), dnsZoneName, __cb(_, __frame, 2, 36, function ___(__0, __2) { dnsZoneName = __2;
          return cli.interaction.promptIfNotGiven($("Record set name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("Type: "), type, __cb(_, __frame, 4, 37, function ___(__0, __4) { options.type = __4;

              dnsManagementClient = getDnsManagementClient(options);
              dnsZone = new DnsZone(cli, dnsManagementClient);
              return dnsZone.deleteRecordSet(resourceGroup, dnsZoneName, name, options, __cb(_, __frame, 8, 14, function __$__80() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  dnsRecordSet.command("add-record [resource-group] [dns-zone-name] [record-set-name] [type]").description($("Add a record in a record set under a DNS zone")).usage("[options] <resource-group> <dns-zone-name> <record-set-name> <type>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-z, --dns-zone-name <dns-zone-name>", $("the name of the DNS zone")).option("-n, --record-set-name <record-set-name>", $("the name of the record set")).option("-y, --type <type>", $(((("the type of the record set." + "\n     If specified only record sets of this type will be listed.") + "\n     Valid values are [A, AAAA, CNAME, MX, NS, SOA, SRV, TXT, PTR]") + "\n\nThe record type A \n\n"))).option("-a  --ipv4-address <ipv4-address>", $(("the IPv4 address attribute\n\n" + "Record type AAAA \n\n"))).option("-b  --ipv6-address <ipv6-address>", $(("the IPv6 address attribute\n\n" + "Record type CNAME\n\n"))).option("-c  --cname <cname>", $(("the canonical name (target)\n\n" + "Record type NS\n\n"))).option("-d  --nsdname <nsdname>", $(("the domain name attribute\n\n" + "Record type MX\n\n"))).option("-f, --preference <preference>", $("preference attribute")).option("-e, --exchange <exchange>", $(("exchange attribute\n\n" + "Record type SRV\n\n"))).option("-p, --priority <priority>", $("the priority attribute")).option("-w, --weight <weight>", $("the weight attribute")).option("-o, --port <port>", $("the port")).option("-u, --target <target>", $(("the target attribute\n\n" + "Record type TXT\n\n"))).option("-x, --text <text>", $(("the text attribute\n\n" + "Record type SOA\n\n"))).option("-l, --email <email>", $("the email attribute")).option("-i, --expire-time <expire-time>", $("the expire time specified in seconds")).option("-S, --serial-number <serial-number>", $("the serial number")).option("-k, --host <host>", $("the host name attribute")).option("-m, --minimum-ttl <minimum-ttl>", $("the minimum time to live specified in seconds")).option("-r, --refresh-time <refresh-time>", $("the refresh time specified in seconds")).option("-j, --retry-time <retry-time>", $(("the retry time specified in seconds" + "\n\nRecord type PTR \n\n"))).option("-P, --ptrd-name <ptrd-name>", $("ptr domain name\n\n")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __81(resourceGroup, dnsZoneName, recordSetName, type, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__81", line: 1690 }; return __func(_, this, arguments, __81, 5, __frame, function __$__81() {






































      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), dnsZoneName, __cb(_, __frame, 2, 36, function ___(__0, __2) { dnsZoneName = __2;
          return cli.interaction.promptIfNotGiven($("Record set name: "), recordSetName, __cb(_, __frame, 3, 38, function ___(__0, __3) { recordSetName = __3;
            return cli.interaction.promptIfNotGiven($("Type: "), type, __cb(_, __frame, 4, 37, function ___(__0, __4) { options.type = __4;

              dnsManagementClient = getDnsManagementClient(options);
              dnsZone = new DnsZone(cli, dnsManagementClient);
              return dnsZone.promptRecordParameters(options.type, options, __cb(_, __frame, 8, 14, function __$__81() {
                return dnsZone.addRecord(resourceGroup, dnsZoneName, recordSetName, options, __cb(_, __frame, 9, 14, function __$__81() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  dnsRecordSet.command("delete-record [resource-group] [dns-zone-name] [record-set-name] [type]").description($("Delete a record from a record set under a DNS zone")).usage("[options] <resource-group> <dns-zone> <record-set-name> <type>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-z, --dns-zone-name <dns-zone-name>", $("the name of the DNS zone")).option("-n, --record-set-name <record-set-name>", $("the name of the record set")).option("-y, --type <type>", $(((("the type of the record set." + "\n     If specified only record sets of this type will be listed.") + "\n     Valid values are [A, AAAA, CNAME, MX, NS, SOA, SRV, TXT, PTR]") + "\n\nThe record type A \n\n"))).option("-a  --ipv4-address <ipv4-address>", $(("the IPv4 address attribute\n\n" + "Record type AAAA \n\n"))).option("-b  --ipv6-address <ipv6-address>", $(("the IPv6 address attribute\n\n" + "Record type CNAME\n\n"))).option("-c  --cname <cname>", $(("the canonical name (target)\n\n" + "Record type NS\n\n"))).option("-d  --nsdname <nsdname>", $(("the domain name attribute\n\n" + "Record type MX\n\n"))).option("-f, --preference <preference>", $("preference attribute")).option("-e, --exchange <exchange>", $(("exchange attribute\n\n" + "Record type SRV\n\n"))).option("-p, --priority <priority>", $("the priority attribute")).option("-w, --weight <weight>", $("the weight attribute")).option("-o, --port <port>", $("the port")).option("-u, --target <target>", $(("the target attribute\n\n" + "Record type TXT\n\n"))).option("-x, --text <text>", $(("the text attribute" + "\n\nRecord type PTR \n\n"))).option("-P, --ptrd-name <ptrd-name>", $("ptr domain name\n\n")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __82(resourceGroup, dnsZoneName, recordSetName, type, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__82", line: 1733 }; return __func(_, this, arguments, __82, 5, __frame, function __$__82() {































      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), dnsZoneName, __cb(_, __frame, 2, 36, function ___(__0, __2) { dnsZoneName = __2;
          return cli.interaction.promptIfNotGiven($("Record set name: "), recordSetName, __cb(_, __frame, 3, 38, function ___(__0, __3) { recordSetName = __3;
            return cli.interaction.promptIfNotGiven($("Type: "), type, __cb(_, __frame, 4, 37, function ___(__0, __4) { options.type = __4;

              dnsManagementClient = getDnsManagementClient(options);
              dnsZone = new DnsZone(cli, dnsManagementClient);
              return dnsZone.promptRecordParameters(options.type, options, __cb(_, __frame, 8, 14, function __$__82() {
                return dnsZone.deleteRecord(resourceGroup, dnsZoneName, recordSetName, options, __cb(_, __frame, 9, 14, function __$__82() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  var trafficManager = network.category("traffic-manager").description($("Commands to manage Traffic Manager"));


  var trafficManagerProfile = trafficManager.category("profile").description($("Commands to manage Traffic Manager profile"));


  trafficManagerProfile.command("create [resource-group] [name]").description($("Create a Traffic Manager profile")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the profile")).option("-u, --profile-status <profile-status> ", util.format($(("the profile status, valid values are" + "\n     [%s], default is %s")), constants.trafficManager.status, constants.trafficManager.status[0])).option("-m, --traffic-routing-method <traffic-routing-method>", util.format($(("the traffic routing method for the profile," + "\n     valid values are [%s], default is %s")), constants.trafficManager.routingMethod, constants.trafficManager.routingMethod[0])).option("-r, --relative-dns-name <relative-dns-name>", $("relative DNS name of the profile e.g. .trafficmanager.net")).option("-l, --ttl <ttl>", $("time to live in specified in seconds")).option("-p, --monitor-protocol <monitor-protocol>", util.format($(("the monitor protocol, valid values are" + "\n     [%s], default is %s")), constants.trafficManager.protocols, constants.trafficManager.protocols[0])).option("-o, --monitor-port <monitor-port>", $("the monitoring port")).option("-a, --monitor-path <monitor-path>", $("the monitoring path")).option("-t, --tags <tags>", $(constants.help.tags.create)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __83(resourceGroup, name, options, _) { var trafficManagerProviderClient, trafficManager; var __frame = { name: "__83", line: 1768 }; return __func(_, this, arguments, __83, 3, __frame, function __$__83() {

















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Profile name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Relative DNS name of the profile, e.g. .trafficmanager.net: "), options.relativeDnsName, __cb(_, __frame, 3, 48, function ___(__0, __3) { options.relativeDnsName = __3;

            trafficManagerProviderClient = getTrafficManagementClient(options);
            trafficManager = new TrafficManager(cli, trafficManagerProviderClient);
            return trafficManager.createProfile(resourceGroup, name, options, __cb(_, __frame, 7, 21, function __$__83() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  trafficManagerProfile.command("set [resource-group] [name]").description($("Set a Traffic Manager profile")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the profile")).option("-u, --profile-status <profile-status> ", util.format($(("the profile status, valid values are" + "\n     [%s], default is %s")), constants.trafficManager.status, constants.trafficManager.status[0])).option("-m, --traffic-routing-method <traffic-routing-method>", util.format($(("the traffic routing method for the profile," + "\n     valid values are [%s], default is %s")), constants.trafficManager.routingMethod, constants.trafficManager.routingMethod[0])).option("-l, --ttl <ttl>", $("time to live specified in seconds")).option("-p, --monitor-protocol <monitor-protocol>", util.format($(("the monitor protocol, valid values are" + "\n     [%s], default is %s")), constants.trafficManager.protocols, constants.trafficManager.protocols[0])).option("-o, --monitor-port <monitor-port>", $("the monitoring port")).option("-a, --monitor-path <monitor-path>", $("the monitoring path")).option("-t, --tags [tags]", $(constants.help.tags.set)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __84(resourceGroup, name, options, _) { var trafficManagerProviderClient, trafficManager; var __frame = { name: "__84", line: 1794 }; return __func(_, this, arguments, __84, 3, __frame, function __$__84() {
















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Profile name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          trafficManagerProviderClient = getTrafficManagementClient(options);
          trafficManager = new TrafficManager(cli, trafficManagerProviderClient);
          return trafficManager.setProfile(resourceGroup, name, options, __cb(_, __frame, 6, 21, function __$__84() { _(); }, true)); }, true)); }, true)); }); });


  trafficManagerProfile.command("list [resource-group]").description($("Get all Traffic Manager profiles")).usage("[options] [resource-group]").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __85(resourceGroup, options, _) { var trafficManagerProviderClient, trafficManager; var __frame = { name: "__85", line: 1808 }; return __func(_, this, arguments, __85, 2, __frame, function __$__85() {





      options.resourceGroup = resourceGroup;
      trafficManagerProviderClient = getTrafficManagementClient(options);
      trafficManager = new TrafficManager(cli, trafficManagerProviderClient);
      return trafficManager.listProfiles(options, __cb(_, __frame, 4, 21, function __$__85() { _(); }, true)); }); });


  trafficManagerProfile.command("show [resource-group] [name]").description($("Get a Traffic Manager profile")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the profile")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __86(resourceGroup, name, options, _) { var trafficManagerProviderClient, trafficManager; var __frame = { name: "__86", line: 1821 }; return __func(_, this, arguments, __86, 3, __frame, function __$__86() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Profile name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          trafficManagerProviderClient = getTrafficManagementClient(options);
          trafficManager = new TrafficManager(cli, trafficManagerProviderClient);
          return trafficManager.showProfile(resourceGroup, name, options, __cb(_, __frame, 6, 21, function __$__86() { _(); }, true)); }, true)); }, true)); }); });


  trafficManagerProfile.command("delete [resource-group] [name]").description($("Delete a Traffic Manager profile")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the profile")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __87(resourceGroup, name, options, _) { var trafficManagerProviderClient, trafficManager; var __frame = { name: "__87", line: 1837 }; return __func(_, this, arguments, __87, 3, __frame, function __$__87() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Profile name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          trafficManagerProviderClient = getTrafficManagementClient(options);
          trafficManager = new TrafficManager(cli, trafficManagerProviderClient);
          return trafficManager.deleteProfile(resourceGroup, name, options, __cb(_, __frame, 6, 21, function __$__87() { _(); }, true)); }, true)); }, true)); }); });


  trafficManagerProfile.command("is-dns-available [relative-dns-name]").description($("Checks whether the specified DNS prefix is available for creating a Traffic Manager profile")).usage("[options] <relative-dns-name>").option("-r, --relative-dns-name <relative-dns-name>", $("the relative DNS name to check for availability")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __88(relativeDnsName, options, _) { var trafficManagerProviderClient, trafficManager; var __frame = { name: "__88", line: 1851 }; return __func(_, this, arguments, __88, 2, __frame, function __$__88() {





      return cli.interaction.promptIfNotGiven($("Relative DNS name: "), relativeDnsName, __cb(_, __frame, 1, 40, function ___(__0, __1) { relativeDnsName = __1;

        trafficManagerProviderClient = getTrafficManagementClient(options);
        trafficManager = new TrafficManager(cli, trafficManagerProviderClient);
        return trafficManager.checkDnsAvailability(relativeDnsName, options, __cb(_, __frame, 5, 21, function __$__88() { _(); }, true)); }, true)); }); });


  var trafficManagerEndpoint = trafficManager.category("endpoint").description($("Commands to manage Traffic Manager endpoints"));


  trafficManagerEndpoint.command("create [resource-group] [profile-name] [name] [type]").description($("Create an endpoint in Traffic Manager profile")).usage("[options] <resource-group> <profile-name> <name> <type>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-f, --profile-name <profile-name>", $("the profile name")).option("-n, --name <name>", $("the name of the endpoint")).option("-y, --type <type>", util.format($(((("the endpoint type, valid values are:" + "\n       [%s], where ExternalEndpoints represents endpoint") + "\n       for a service with FQDN external to Azure") + "\n       e.g. foobar.contoso.com")), constants.trafficManager.endpointType)).option("-l, --location <location>", $((("the endpoint location. This is only used if the Traffic Manager profile is configured to use the \"Performance\" traffic-routing method." + "\n       This should only be specified on endpoints of type \"ExternalEndpoints\" and \"NestedEndpoints\".") + "\n       It is not applicable for endpoints of type \"AzureEndpoints\", since the location is taken from the resource specified in \"--target-resource-id\"."))).option("-u, --status <status>", util.format($(("the endpoint status, valid values are:" + "\n       [%s] Default is %s")), constants.trafficManager.status, constants.trafficManager.status[0])).option("-t, --target <target>", $(("the domain name target of the endpoint," + "\n       e.g. foobar.contoso.com. Only applicable to endpoints of type \"ExternalEndpoints\""))).option("-i, --target-resource-id <target-resource-id>", $("the Azure Resource URI of the endpoint. Not applicable to endpoints of type \"ExternalEndpoints\"")).option("-w, --weight <weight>", util.format($(("the endpoint weight used in the traffic-routing method," + "\n       valid range is [%s, %s] This is only used if the Traffic Manager profile is configured to use the \"Weighted\" traffic-routing method")), constants.trafficManager.weightMin, constants.trafficManager.weightMax)).option("-p, --priority <priority>", util.format($((("the endpoint priority used in the traffic-routing method," + "\n       valid range is [%s, %s] This is only used if the Traffic Manager profile is configured to use the \"Priority\" traffic-routing method.") + "\n       Lower values represent higher priority")), constants.trafficManager.priorityMin, constants.trafficManager.priorityMax)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __89(resourceGroup, profileName, name, type, options, _) { var trafficManagerProviderClient, trafficManager; var __frame = { name: "__89", line: 1886 }; return __func(_, this, arguments, __89, 5, __frame, function __$__89() {
























      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 2, 36, function ___(__0, __2) { profileName = __2;
          return cli.interaction.promptIfNotGiven($("Endpoint name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("Endpoint type: "), type, __cb(_, __frame, 4, 37, function ___(__0, __4) { options.type = __4;

              trafficManagerProviderClient = getTrafficManagementClient(options);
              trafficManager = new TrafficManager(cli, trafficManagerProviderClient);
              return trafficManager.createEndpoint(resourceGroup, profileName, name, options, __cb(_, __frame, 8, 21, function __$__89() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  trafficManagerEndpoint.command("set [resource-group] [profile-name] [name] [type]").description($("Set an endpoint in a Traffic Manager profile")).usage("[options] <resource-group> <profile-name> <name> <type>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-f, --profile-name <profile-name>", $("the profile name")).option("-n, --name <name>", $("the name of the endpoint")).option("-y, --type <type>", util.format($(((("the endpoint type, valid values are:" + "\n       [%s], where ExternalEndpoints represents endpoint") + "\n       for a service with FQDN external to Azure") + "\n       e.g. foobar.contoso.com")), constants.trafficManager.endpointType)).option("-l, --location <location>", $((("the endpoint location. This is only used if the Traffic Manager profile is configured to use the \"Performance\" traffic-routing method." + "\n       This should only be specified on endpoints of type \"ExternalEndpoints\" and \"NestedEndpoints\".") + "\n       It is not applicable for endpoints of type \"AzureEndpoints\", since the location is taken from the resource specified in \"--target-resource-id\"."))).option("-u, --status <status>", util.format($(("the endpoint status, valid values are:" + "\n       [%s] Default is %s")), constants.trafficManager.status, constants.trafficManager.status[0])).option("-t, --target <target>", $(("the domain name target of the endpoint," + "\n       e.g. foobar.contoso.com. Only applicable to endpoints of type \"ExternalEndpoints\""))).option("-i, --target-resource-id <target-resource-id>", $("the Azure Resource URI of the endpoint. Not applicable to endpoints of type \"ExternalEndpoints\"")).option("-w, --weight <weight>", util.format($(("the endpoint weight used in the traffic-routing method," + "\n       valid range is [%s, %s] This is only used if the Traffic Manager profile is configured to use the \"Weighted\" traffic-routing method")), constants.trafficManager.weightMin, constants.trafficManager.weightMax)).option("-p, --priority <priority>", util.format($((("the endpoint priority used in the traffic-routing method," + "\n       valid range is [%s, %s] This is only used if the Traffic Manager profile is configured to use the \"Priority\" traffic-routing method.") + "\n       Lower values represent higher priority")), constants.trafficManager.priorityMin, constants.trafficManager.priorityMax)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __90(resourceGroup, profileName, name, type, options, _) { var trafficManagerProviderClient, trafficManager; var __frame = { name: "__90", line: 1921 }; return __func(_, this, arguments, __90, 5, __frame, function __$__90() {
























      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 2, 36, function ___(__0, __2) { profileName = __2;
          return cli.interaction.promptIfNotGiven($("Endpoint name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("Endpoint type: "), type, __cb(_, __frame, 4, 37, function ___(__0, __4) { options.type = __4;

              trafficManagerProviderClient = getTrafficManagementClient(options);
              trafficManager = new TrafficManager(cli, trafficManagerProviderClient);
              return trafficManager.setEndpoint(resourceGroup, profileName, name, options, __cb(_, __frame, 8, 21, function __$__90() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  trafficManagerEndpoint.command("show [resource-group] [profile-name] [name] [type]").description($("Get an endpoint in Traffic Manager profile")).usage("[options] <resource-group> <profile-name> <name> <type>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-f, --profile-name <profile-name>", $("the profile name")).option("-n, --name <name>", $("the name of the endpoint")).option("-y, --type <type>", util.format($(((("the endpoint type, valid values are:" + "\n       [%s], where ExternalEndpoints represents endpoint") + "\n       for a service with FQDN external to Azure") + "\n       e.g. foobar.contoso.com")), constants.trafficManager.endpointType)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __91(resourceGroup, profileName, name, type, options, _) { var trafficManagerProviderClient, trafficManager; var __frame = { name: "__91", line: 1943 }; return __func(_, this, arguments, __91, 5, __frame, function __$__91() {











      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 2, 36, function ___(__0, __2) { profileName = __2;
          return cli.interaction.promptIfNotGiven($("Endpoint name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("Endpoint type: "), type, __cb(_, __frame, 4, 37, function ___(__0, __4) { options.type = __4;

              trafficManagerProviderClient = getTrafficManagementClient(options);
              trafficManager = new TrafficManager(cli, trafficManagerProviderClient);
              return trafficManager.showEndpoint(resourceGroup, profileName, name, options, __cb(_, __frame, 8, 21, function __$__91() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  trafficManagerEndpoint.command("delete [resource-group] [profile-name] [name] [type]").description($("Delete an endpoint from a Traffic Manager profile")).usage("[options] <resource-group> <profile-name> <name> <type>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-f, --profile-name <profile-name>", $("the profile name")).option("-n, --name <name>", $("the name of the endpoint")).option("-y, --type <type>", util.format($(((("the endpoint type, valid values are:" + "\n       [%s], where ExternalEndpoints represents endpoint") + "\n       for a service with FQDN external to Azure") + "\n       e.g. foobar.contoso.com")), constants.trafficManager.endpointType)).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __92(resourceGroup, profileName, name, type, options, _) { var trafficManagerProviderClient, trafficManager; var __frame = { name: "__92", line: 1966 }; return __func(_, this, arguments, __92, 5, __frame, function __$__92() {












      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 2, 36, function ___(__0, __2) { profileName = __2;
          return cli.interaction.promptIfNotGiven($("Endpoint name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("Endpoint type: "), type, __cb(_, __frame, 4, 37, function ___(__0, __4) { options.type = __4;

              trafficManagerProviderClient = getTrafficManagementClient(options);
              trafficManager = new TrafficManager(cli, trafficManagerProviderClient);
              return trafficManager.deleteEndpoint(resourceGroup, profileName, name, options, __cb(_, __frame, 8, 21, function __$__92() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  var routeTable = network.category("route-table").description($("Commands to manage Route Table"));


  routeTable.command("create [resource-group] [name] [location]").description($("Create a Route Table")).usage("[options] <resource-group> <name> <location>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the Route Table")).option("-l, --location <location>", $("the location, this must be same as the location of the virtual network containing the subnet on which this Route Table needs to be applied")).option("-t, --tags <tags>", $(constants.help.tags.create)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __93(resourceGroup, name, location, options, _) { var networkManagementClient, routeTable; var __frame = { name: "__93", line: 1988 }; return __func(_, this, arguments, __93, 4, __frame, function __$__93() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Route Table name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Location: "), location, __cb(_, __frame, 3, 41, function ___(__0, __3) { options.location = __3;

            networkManagementClient = getNetworkManagementClient(options);
            routeTable = new RouteTable(cli, networkManagementClient);
            return routeTable.create(resourceGroup, name, options, __cb(_, __frame, 7, 17, function __$__93() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  routeTable.command("set [resource-group] [name]").description($("Set a Route Table")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the Route Table")).option("-t, --tags [tags]", $(constants.help.tags.set)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __94(resourceGroup, name, options, _) { var networkManagementClient, routeTable; var __frame = { name: "__94", line: 2005 }; return __func(_, this, arguments, __94, 3, __frame, function __$__94() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Route Table name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          routeTable = new RouteTable(cli, networkManagementClient);
          return routeTable.set(resourceGroup, name, options, __cb(_, __frame, 6, 17, function __$__94() { _(); }, true)); }, true)); }, true)); }); });


  routeTable.command("list [resource-group]").description($("Get all Route Tables")).usage("[options] [resource-group]").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __95(resourceGroup, options, _) { var networkManagementClient, routeTable; var __frame = { name: "__95", line: 2019 }; return __func(_, this, arguments, __95, 2, __frame, function __$__95() {





      options.resourceGroup = resourceGroup;
      networkManagementClient = getNetworkManagementClient(options);
      routeTable = new RouteTable(cli, networkManagementClient);
      return routeTable.list(options, __cb(_, __frame, 4, 17, function __$__95() { _(); }, true)); }); });


  routeTable.command("show [resource-group] [name]").description($("Get a Route Table")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the Route Table")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __96(resourceGroup, name, options, _) { var networkManagementClient, routeTable; var __frame = { name: "__96", line: 2032 }; return __func(_, this, arguments, __96, 3, __frame, function __$__96() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Route Table name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          routeTable = new RouteTable(cli, networkManagementClient);
          return routeTable.show(resourceGroup, name, options, __cb(_, __frame, 6, 17, function __$__96() { _(); }, true)); }, true)); }, true)); }); });


  routeTable.command("delete [resource-group] [name]").description($("Delete a Route Table")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the Route Table")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __97(resourceGroup, name, options, _) { var networkManagementClient, routeTable; var __frame = { name: "__97", line: 2048 }; return __func(_, this, arguments, __97, 3, __frame, function __$__97() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Route Table name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          routeTable = new RouteTable(cli, networkManagementClient);
          return routeTable.delete(resourceGroup, name, options, __cb(_, __frame, 6, 17, function __$__97() { _(); }, true)); }, true)); }, true)); }); });


  var routeTableRoute = routeTable.category("route").description($("Commands to manage Route Table routes"));


  routeTableRoute.command("create [resource-group] [route-table-name] [name]").description($("Create route in a Route Table")).usage("[options] <resource-group> <route-table-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-r, --route-table-name <route-table-name>", $("the name of the Route Table")).option("-n, --name <name>", $("the name of the route")).option("-a, --address-prefix <address-prefix>", $("the route address prefix e.g. 0.0.0.0/0")).option("-y, --next-hop-type <next-hop-type>", util.format($(("the route next hop type, valid values are:" + "\n       [%s]")), constants.route.nextHopType)).option("-p, --next-hop-ip-address <next-hop-ip-address>", $(("the route next hop ip addresses, this parameter is valid" + "\n       only for next hop type VirtualAppliance"))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __98(resourceGroup, routeTableName, name, options, _) { var networkManagementClient, routeTable; var __frame = { name: "__98", line: 2072 }; return __func(_, this, arguments, __98, 4, __frame, function __$__98() {












      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Route Table name: "), routeTableName, __cb(_, __frame, 2, 39, function ___(__0, __2) { routeTableName = __2;
          return cli.interaction.promptIfNotGiven($("Route name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("Address prefix: "), options.addressPrefix, __cb(_, __frame, 4, 46, function ___(__0, __4) { options.addressPrefix = __4;
              return cli.interaction.promptIfNotGiven($("Next hop type: "), options.nextHopType, __cb(_, __frame, 5, 44, function ___(__0, __5) { options.nextHopType = __5;

                networkManagementClient = getNetworkManagementClient(options);
                routeTable = new RouteTable(cli, networkManagementClient);
                return routeTable.createRoute(resourceGroup, routeTableName, name, options, __cb(_, __frame, 9, 17, function __$__98() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  routeTableRoute.command("set [resource-group] [route-table-name] [name]").description($("Set route in a Route Table")).usage("[options] <resource-group> <route-table-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-r, --route-table-name <route-table-name>", $("the name of the Route Table")).option("-n, --name <name>", $("the name of the route")).option("-a, --address-prefix <address-prefix>", $("the route address prefix e.g. 0.0.0.0/0")).option("-y, --next-hop-type <next-hop-type>", util.format($(("the route next hop type, valid values are:" + "\n       [%s]")), constants.route.nextHopType)).option("-p, --next-hop-ip-address <next-hop-ip-address>", $(("the route next hop ip addresses, this parameter is valid" + "\n       only for next hop type VirualAppliance"))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __99(resourceGroup, routeTableName, name, options, _) { var networkManagementClient, routeTable; var __frame = { name: "__99", line: 2096 }; return __func(_, this, arguments, __99, 4, __frame, function __$__99() {












      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Route Table name: "), routeTableName, __cb(_, __frame, 2, 39, function ___(__0, __2) { routeTableName = __2;
          return cli.interaction.promptIfNotGiven($("Route name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            routeTable = new RouteTable(cli, networkManagementClient);
            return routeTable.setRoute(resourceGroup, routeTableName, name, options, __cb(_, __frame, 7, 17, function __$__99() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  routeTableRoute.command("list [resource-group] [route-table-name]").description($("List all routes in a Route Table")).usage("[options] <resource-group> <route-table-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-r, --route-table-name <route-table-name>", $("the name of the Route Table")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __100(resourceGroup, routeTableName, options, _) { var networkManagementClient, routeTable; var __frame = { name: "__100", line: 2112 }; return __func(_, this, arguments, __100, 3, __frame, function __$__100() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Route Table name: "), routeTableName, __cb(_, __frame, 2, 39, function ___(__0, __2) { routeTableName = __2;

          networkManagementClient = getNetworkManagementClient(options);
          routeTable = new RouteTable(cli, networkManagementClient);
          return routeTable.listRoutes(resourceGroup, routeTableName, options, __cb(_, __frame, 6, 17, function __$__100() { _(); }, true)); }, true)); }, true)); }); });


  routeTableRoute.command("show [resource-group] [route-table-name] [name]").description($("Show details about route in a Route Table")).usage("[options] <resource-group> <route-table-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-r, --route-table-name <route-table-name>", $("the name of the Route Table")).option("-n, --name <name>", $("the name of the route")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __101(resourceGroup, routeTableName, name, options, _) { var networkManagementClient, routeTable; var __frame = { name: "__101", line: 2128 }; return __func(_, this, arguments, __101, 4, __frame, function __$__101() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Route Table name: "), routeTableName, __cb(_, __frame, 2, 39, function ___(__0, __2) { routeTableName = __2;
          return cli.interaction.promptIfNotGiven($("Route name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            routeTable = new RouteTable(cli, networkManagementClient);
            return routeTable.showRoute(resourceGroup, routeTableName, name, options, __cb(_, __frame, 7, 17, function __$__101() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  routeTableRoute.command("delete [resource-group] [route-table-name] [name]").description($("Delete route from a Route Table")).usage("[options] <resource-group> <route-table-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-r, --route-table-name <route-table-name>", $("the name of the Route Table")).option("-n, --name <name>", $("the name of the route")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __102(resourceGroup, routeTableName, name, options, _) { var networkManagementClient, routeTable; var __frame = { name: "__102", line: 2146 }; return __func(_, this, arguments, __102, 4, __frame, function __$__102() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Route Table name: "), routeTableName, __cb(_, __frame, 2, 39, function ___(__0, __2) { routeTableName = __2;
          return cli.interaction.promptIfNotGiven($("Route name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            routeTable = new RouteTable(cli, networkManagementClient);
            return routeTable.deleteRoute(resourceGroup, routeTableName, name, options, __cb(_, __frame, 7, 17, function __$__102() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var localGateway = network.category("local-gateway").description($("Commands to manage Local Network Gateways"));


  localGateway.command("create [resource-group] [name] [location]").description($("Create a local network gateway")).usage("[options] <resource-group> <name> <location>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the local network gateway")).option("-l, --location <location>", $("the location")).option("-a, --address-space <address-space>", $("the comma separated list of address prefixes in CIDR format")).option("-i, --ip-address <ip-address>", $("the IP address of the local network site")).option("-t, --tags <tags>", $(constants.help.tags.create)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __103(resourceGroup, name, location, options, _) { var networkManagementClient, localNetwork; var __frame = { name: "__103", line: 2169 }; return __func(_, this, arguments, __103, 4, __frame, function __$__103() {










      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Local network gateway name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Location: "), location, __cb(_, __frame, 3, 41, function ___(__0, __3) { options.location = __3;
            return cli.interaction.promptIfNotGiven($("IP address: "), options.ipAddress, __cb(_, __frame, 4, 42, function ___(__0, __4) { options.ipAddress = __4;

              networkManagementClient = getNetworkManagementClient(options);
              localNetwork = new LocalNetworkGateway(cli, networkManagementClient);
              return localNetwork.create(resourceGroup, name, options, __cb(_, __frame, 8, 19, function __$__103() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  localGateway.command("set [resource-group] [name]").description($("Set a local network gateway")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the local network gateway")).option("-a, --address-space [address-space]", $("the comma separated list of address prefixes in CIDR format")).option("-t, --tags [tags]", $(constants.help.tags.set)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __104(resourceGroup, name, options, _) { var networkManagementClient, localNetwork; var __frame = { name: "__104", line: 2188 }; return __func(_, this, arguments, __104, 3, __frame, function __$__104() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Local network gateway name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          localNetwork = new LocalNetworkGateway(cli, networkManagementClient);
          return localNetwork.set(resourceGroup, name, options, __cb(_, __frame, 6, 19, function __$__104() { _(); }, true)); }, true)); }, true)); }); });


  localGateway.command("list [resource-group]").usage("[options] <resource-group>").description($("Get all local networks gateways")).option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __105(resourceGroup, options, _) { var networkManagementClient, localNetwork; var __frame = { name: "__105", line: 2202 }; return __func(_, this, arguments, __105, 2, __frame, function __$__105() {





      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;

        networkManagementClient = getNetworkManagementClient(options);
        localNetwork = new LocalNetworkGateway(cli, networkManagementClient);
        return localNetwork.list(resourceGroup, options, __cb(_, __frame, 5, 19, function __$__105() { _(); }, true)); }, true)); }); });


  localGateway.command("show [resource-group] [name]").usage("[options] <resource-group> <name>").description($("Get a local network gateway")).option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the local network gateway")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __106(resourceGroup, name, options, _) { var networkManagementClient, localNetwork; var __frame = { name: "__106", line: 2216 }; return __func(_, this, arguments, __106, 3, __frame, function __$__106() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Local network gateway name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          localNetwork = new LocalNetworkGateway(cli, networkManagementClient);
          return localNetwork.show(resourceGroup, name, options, __cb(_, __frame, 6, 19, function __$__106() { _(); }, true)); }, true)); }, true)); }); });


  localGateway.command("delete [resource-group] [name]").usage("[options] <resource-group> <name>").description($("Delete a local network gateway")).option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the local network gateway")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __107(resourceGroup, name, options, _) { var networkManagementClient, localNetwork; var __frame = { name: "__107", line: 2232 }; return __func(_, this, arguments, __107, 3, __frame, function __$__107() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Local network gateway name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          localNetwork = new LocalNetworkGateway(cli, networkManagementClient);
          return localNetwork.delete(resourceGroup, name, options, __cb(_, __frame, 6, 19, function __$__107() { _(); }, true)); }, true)); }, true)); }); });


  var vpnGateway = network.category("vpn-gateway").description($("Commands to manage Virtual Network Gateways"));


  vpnGateway.command("create [resource-group] [name] [location]").description($("Create a virtual network gateway")).usage("[options] <resource-group> <name> <location>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the virtual network gateway")).option("-l, --location <location>", $("the location")).option("-w, --gateway-type <gateway-type>", util.format($((("the gateway type" + "\n     Valid values are [%s]") + "\n     Default is Vpn")), constants.vpnGateway.gatewayType)).option("-y, --vpn-type <vpn-type>", util.format($((("the vpn type" + "\n     Valid values are [%s]") + "\n     Default is RouteBased")), constants.vpnGateway.vpnType)).option("-k, --sku-name <sku-name>", util.format($((("the SKU name" + "\n     Valid values are [%s]") + "\n     Default is Basic")), constants.vpnGateway.sku)).option("-u, --public-ip-id <public-ip-id>", util.format($(("the public ip identifier." + "\n     e.g. %s")), constants.help.id.publicIp)).option("-p, --public-ip-name <public-ip-name>", $(("the public ip name. This public ip must exists in the same resource group as the vnet gateway. " + "\n     Please use public-ip-id if that is not the case."))).option("-f, --subnet-id <subnet-id>", util.format($(("the subnet identifier." + "\n     e.g. %s")), constants.help.id.subnet)).option("-m, --vnet-name <vnet-name>", $(("the virtual network name. This virtual network must exists in the same resource group as the vnet gateway. " + "\n     Please use subnet-id if that is not the case."))).option("-e, --subnet-name <subnet-name>", util.format($("the subnet name which exists in vnet. Default value is \"%s\""), constants.vpnGateway.subnetName)).option("-d, --default-site-name <default-site-name>", $(("the Local Network Gateway name. This Local Network Gateway must exists in the same resource group as the vnet gateway. " + "\n     Please use default-site-id if that is not the case."))).option("-i, --default-site-id <default-site-id>", util.format($(("Local Network Gateway identifier." + "\n     e.g. %s")), constants.help.id.localGateway)).option("-f, --address-prefixes <address-prefixes>", $(("the comma separated list of address prefixes." + "\n     For example, -f \"10.0.0.0/24,10.0.1.0/24\""))).option("-a, --private-ip-address <private-ip-address>", $("the local ip address for the gateway in the vnet. If not provided then using Dynamic ip address")).option("-b, --enable-bgp <enable-bgp>", util.format($("enable bgp [%s]"), constants.bool)).option("-t, --tags <tags>", $(constants.help.tags.create)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __108(resourceGroup, name, location, options, _) { var networkManagementClient, vnetGateway; var __frame = { name: "__108", line: 2278 }; return __func(_, this, arguments, __108, 4, __frame, function __$__108() {


































      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network gateway name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Location: "), location, __cb(_, __frame, 3, 41, function ___(__0, __3) { options.location = __3;

            networkManagementClient = getNetworkManagementClient(options);
            vnetGateway = new VirtualNetworkGateway(cli, networkManagementClient);
            return vnetGateway.create(resourceGroup, name, options, __cb(_, __frame, 7, 18, function __$__108() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  vpnGateway.command("set [resource-group] [name]").description($("Set a virtual network gateway")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the virtual network gateway")).option("-k, --sku-name <sku-name>", util.format($(("the SKU name" + "\n     Valid values are [%s]")), constants.vpnGateway.sku)).option("-a, --private-ip-address <private-ip-address>", $("the local ip address for the gateway in the vnet")).option("-d, --default-site-name [default-site-name]", $(("the Local Network Gateway name. This Local Network Gateway must exists in the same resource group as the vnet gateway. " + "\n     Please use default-site-id if that is not the case."))).option("-i, --default-site-id [default-site-id]", util.format($(("Local Network Gateway identifier." + "\n     e.g. %s")), constants.help.id.localGateway)).option("-f, --address-prefixes <address-prefixes>", $(("the comma separated list of address prefixes." + "\n     For example, -f \"10.0.0.0/24,10.0.1.0/24\""))).option("-t, --tags [tags]", $(constants.help.tags.set)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __109(resourceGroup, name, options, _) { var networkManagementClient, vnetGateway; var __frame = { name: "__109", line: 2304 }; return __func(_, this, arguments, __109, 3, __frame, function __$__109() {
















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network gateway name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          vnetGateway = new VirtualNetworkGateway(cli, networkManagementClient);
          return vnetGateway.set(resourceGroup, name, options, __cb(_, __frame, 6, 18, function __$__109() { _(); }, true)); }, true)); }, true)); }); });


  vpnGateway.command("list [resource-group]").description($("List virtual network gateways")).usage("[options] <resource-group>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __110(resourceGroup, options, _) { var networkManagementClient, vnetGateway; var __frame = { name: "__110", line: 2318 }; return __func(_, this, arguments, __110, 2, __frame, function __$__110() {





      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;

        networkManagementClient = getNetworkManagementClient(options);
        vnetGateway = new VirtualNetworkGateway(cli, networkManagementClient);
        return vnetGateway.list(resourceGroup, options, __cb(_, __frame, 5, 18, function __$__110() { _(); }, true)); }, true)); }); });


  vpnGateway.command("show [resource-group] [name]").description($("Get a virtual network gateway")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the virtual network gateway")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __111(resourceGroup, name, options, _) { var networkManagementClient, vnetGateway; var __frame = { name: "__111", line: 2332 }; return __func(_, this, arguments, __111, 3, __frame, function __$__111() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network gateway name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          vnetGateway = new VirtualNetworkGateway(cli, networkManagementClient);
          return vnetGateway.show(resourceGroup, name, options, __cb(_, __frame, 6, 18, function __$__111() { _(); }, true)); }, true)); }, true)); }); });


  vpnGateway.command("delete [resource-group] [name]").description($("Delete a virtual network gateway")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the virtual network gateway")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __112(resourceGroup, name, options, _) { var networkManagementClient, vnetGateway; var __frame = { name: "__112", line: 2348 }; return __func(_, this, arguments, __112, 3, __frame, function __$__112() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network gateway name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          vnetGateway = new VirtualNetworkGateway(cli, networkManagementClient);
          return vnetGateway.delete(resourceGroup, name, options, __cb(_, __frame, 6, 18, function __$__112() { _(); }, true)); }, true)); }, true)); }); });


  var vpnGatewayRootCert = vpnGateway.category("root-cert").description($("Commands to manage Virtual Network Gateways Root Certificates"));


  vpnGatewayRootCert.command("create [resource-group] [name] [cert-name]").description($("Add a root certificate to a virtual network gateway")).usage("[options] <resource-group> <name> <cert-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the virtual network gateway")).option("-c, --cert-name <cert-name>", $("the name of the root certificate")).option("-f, --cert-file <cert-file>", $("the path to the root certificate")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __113(resourceGroup, name, certName, options, _) { var networkManagementClient, vnetGateway; var __frame = { name: "__113", line: 2368 }; return __func(_, this, arguments, __113, 4, __frame, function __$__113() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network gateway name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Root certificate name: "), certName, __cb(_, __frame, 3, 33, function ___(__0, __3) { certName = __3;
            return cli.interaction.promptIfNotGiven($("Path to root certificate: "), options.certFile, __cb(_, __frame, 4, 41, function ___(__0, __4) { options.certFile = __4;

              networkManagementClient = getNetworkManagementClient(options);
              vnetGateway = new VirtualNetworkGateway(cli, networkManagementClient);
              return vnetGateway.createRootCert(resourceGroup, name, certName, options, __cb(_, __frame, 8, 18, function __$__113() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  vpnGatewayRootCert.command("delete [resource-group] [name] [cert-name]").description($("Delete a root certificate from a virtual network gateway")).usage("[options] <resource-group> <name> <cert-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the virtual network gateway")).option("-c, --cert-name <cert-name>", $("the name of the root certificate")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __114(resourceGroup, name, certName, options, _) { var networkManagementClient, vnetGateway; var __frame = { name: "__114", line: 2387 }; return __func(_, this, arguments, __114, 4, __frame, function __$__114() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network gateway name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Root certificate name: "), certName, __cb(_, __frame, 3, 33, function ___(__0, __3) { certName = __3;

            networkManagementClient = getNetworkManagementClient(options);
            vnetGateway = new VirtualNetworkGateway(cli, networkManagementClient);
            return vnetGateway.deleteRootCert(resourceGroup, name, certName, options, __cb(_, __frame, 7, 18, function __$__114() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var vpnGatewayRevokedCert = vpnGateway.category("revoked-cert").description($("Commands to manage Virtual Network Gateways Revoked Certificates"));


  vpnGatewayRevokedCert.command("create [resource-group] [name] [cert-name]").description($("Add a revoked certificate to a virtual network gateway")).usage("[options] <resource-group> <name> <cert-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the virtual network gateway")).option("-c, --cert-name <cert-name>", $("the name of the revoked certificate")).option("-f, --thumbprint <thumbprint>", $("the certificate thumbprint")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __115(resourceGroup, name, certName, options, _) { var networkManagementClient, vnetGateway; var __frame = { name: "__115", line: 2408 }; return __func(_, this, arguments, __115, 4, __frame, function __$__115() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network gateway name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Revoked certificate name: "), certName, __cb(_, __frame, 3, 33, function ___(__0, __3) { certName = __3;
            return cli.interaction.promptIfNotGiven($("Thumbprint: "), options.thumbprint, __cb(_, __frame, 4, 43, function ___(__0, __4) { options.thumbprint = __4;

              networkManagementClient = getNetworkManagementClient(options);
              vnetGateway = new VirtualNetworkGateway(cli, networkManagementClient);
              return vnetGateway.createRevokedCert(resourceGroup, name, certName, options, __cb(_, __frame, 8, 18, function __$__115() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  vpnGatewayRevokedCert.command("delete [resource-group] [name] [cert-name]").description($("Delete a revoked certificate from a virtual network gateway")).usage("[options] <resource-group> <name> <cert-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the virtual network gateway")).option("-c, --cert-name <cert-name>", $("the name of the revoked certificate")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __116(resourceGroup, name, certName, options, _) { var networkManagementClient, vnetGateway; var __frame = { name: "__116", line: 2427 }; return __func(_, this, arguments, __116, 4, __frame, function __$__116() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network gateway name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Revoked certificate name: "), certName, __cb(_, __frame, 3, 33, function ___(__0, __3) { certName = __3;

            networkManagementClient = getNetworkManagementClient(options);
            vnetGateway = new VirtualNetworkGateway(cli, networkManagementClient);
            return vnetGateway.deleteRevokedCert(resourceGroup, name, certName, options, __cb(_, __frame, 7, 18, function __$__116() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var gatewayConnection = network.category("vpn-connection").description($("Commands to manage gateway connections"));


  gatewayConnection.command("create [resource-group] [name] [location]").description($("Create a gateway connection")).usage("[options] <resource-group> <name> <location>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the gateway connection")).option("-l, --location <location>", $("the location")).option("-i, --vnet-gateway1 <vnet-gateway1>", $("the name of the virtual network gateway")).option("-r, --vnet-gateway1-group <vnet-gateway1-group>", $("the resource group name of the virtual network gateway")).option("-e, --vnet-gateway2 <vnet-gateway2>", $("the name of the connected virtual network gateway")).option("-m, --vnet-gateway2-group <vnet-gateway2-group>", $("the resource group name of the connected virtual network gateway")).option("-d, --lnet-gateway2 <lnet-gateway2>", $("the name of the connected local network gateway")).option("-z, --lnet-gateway2-group <lnet-gateway2-group>", $("the resource group name of the connected local network gateway")).option("-y, --type <type>", util.format($(("the connection type" + "\n     Valid values are [%s]")), constants.vpnGateway.connectionType)).option("-w, --routing-weight <routing-weight>", $("the routing weight")).option("-k, --shared-key <shared-key>", $("the IPsec shared key")).option("-s, --subscription <subscription>", $("the subscription identifier")).option("-t, --tags <tags>", $(constants.help.tags.create)).execute(function __117(resourceGroup, name, location, options, _) { var networkManagementClient, vpnGateway; var __frame = { name: "__117", line: 2458 }; return __func(_, this, arguments, __117, 4, __frame, function __$__117() {


















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Connection name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Location: "), location, __cb(_, __frame, 3, 41, function ___(__0, __3) { options.location = __3;
            return cli.interaction.promptIfNotGiven($("Virtual network gateway: "), options.vnetGateway1, __cb(_, __frame, 4, 45, function ___(__0, __4) { options.vnetGateway1 = __4;

              networkManagementClient = getNetworkManagementClient(options);
              vpnGateway = new VirtualNetworkGateway(cli, networkManagementClient);
              return vpnGateway.createConnection(resourceGroup, name, options, __cb(_, __frame, 8, 17, function __$__117() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  gatewayConnection.command("set [resource-group] [name]").description($("Set a gateway connection")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the gateway connection")).option("-w, --routing-weight <routing-weight>", $("the routing weight")).option("-s, --subscription <subscription>", $("the subscription identifier")).option("-t, --tags [tags]", $(constants.help.tags.set)).execute(function __118(resourceGroup, name, options, _) { var networkManagementClient, vpnGateway; var __frame = { name: "__118", line: 2477 }; return __func(_, this, arguments, __118, 3, __frame, function __$__118() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Connection name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          vpnGateway = new VirtualNetworkGateway(cli, networkManagementClient);
          return vpnGateway.setConnection(resourceGroup, name, options, __cb(_, __frame, 6, 17, function __$__118() { _(); }, true)); }, true)); }, true)); }); });


  gatewayConnection.command("list [resource-group]").description($("Get all gateway connections")).usage("[options] <resource-group>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __119(resourceGroup, options, _) { var networkManagementClient, vpnGateway; var __frame = { name: "__119", line: 2491 }; return __func(_, this, arguments, __119, 2, __frame, function __$__119() {





      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;

        networkManagementClient = getNetworkManagementClient(options);
        vpnGateway = new VirtualNetworkGateway(cli, networkManagementClient);
        return vpnGateway.listConnections(resourceGroup, options, __cb(_, __frame, 5, 17, function __$__119() { _(); }, true)); }, true)); }); });


  gatewayConnection.command("show [resource-group] [name]").description($("Get details about gateway connection")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the gateway connection")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __120(resourceGroup, name, options, _) { var networkManagementClient, vpnGateway; var __frame = { name: "__120", line: 2505 }; return __func(_, this, arguments, __120, 3, __frame, function __$__120() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Connection name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          vpnGateway = new VirtualNetworkGateway(cli, networkManagementClient);
          return vpnGateway.showConnection(resourceGroup, name, options, __cb(_, __frame, 6, 17, function __$__120() { _(); }, true)); }, true)); }, true)); }); });


  gatewayConnection.command("delete [resource-group] [name]").usage("[options] <resource-group> <name>").description($("Delete a gateway connection")).option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the gateway connection")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <id>", $("the subscription id")).execute(function __121(resourceGroup, name, options, _) { var networkManagementClient, vpnGateway; var __frame = { name: "__121", line: 2521 }; return __func(_, this, arguments, __121, 3, __frame, function __$__121() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Connection name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          vpnGateway = new VirtualNetworkGateway(cli, networkManagementClient);
          return vpnGateway.deleteConnection(resourceGroup, name, options, __cb(_, __frame, 6, 17, function __$__121() { _(); }, true)); }, true)); }, true)); }); });


  var connectionSharedKey = gatewayConnection.category("shared-key").description($("Commands to manage gateway connection shared key"));


  connectionSharedKey.command("set [resource-group] [name] [value]").description($("Set gateway connection shared key")).usage("[options] <resource-group> <name> <value>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the gateway connection")).option("-k, --value <value>", $("the shared key value")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __122(resourceGroup, name, value, options, _) { var networkManagementClient, vpnGateway; var __frame = { name: "__122", line: 2540 }; return __func(_, this, arguments, __122, 4, __frame, function __$__122() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Connection name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Shared key value: "), value, __cb(_, __frame, 3, 38, function ___(__0, __3) { options.value = __3;

            networkManagementClient = getNetworkManagementClient(options);
            vpnGateway = new VirtualNetworkGateway(cli, networkManagementClient);
            return vpnGateway.setConnectionSharedKey(resourceGroup, name, options, __cb(_, __frame, 7, 17, function __$__122() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  connectionSharedKey.command("reset [resource-group] [name] [key-length]").description($("Reset gateway connection shared key")).usage("[options] <resource-group> <name> <key-length>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the gateway connection")).option("-l, --key-length <key-length>", $("the shared key length")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __123(resourceGroup, name, keyLength, options, _) { var networkManagementClient, vpnGateway; var __frame = { name: "__123", line: 2557 }; return __func(_, this, arguments, __123, 4, __frame, function __$__123() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Connection name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Shared key length: "), keyLength, __cb(_, __frame, 3, 42, function ___(__0, __3) { options.keyLength = __3;

            networkManagementClient = getNetworkManagementClient(options);
            vpnGateway = new VirtualNetworkGateway(cli, networkManagementClient);
            return vpnGateway.resetConnectionSharedKey(resourceGroup, name, options, __cb(_, __frame, 7, 17, function __$__123() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  connectionSharedKey.command("show [resource-group] [name]").description($("Get details about gateway connection shared key")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the gateway connection")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __124(resourceGroup, name, options, _) { var networkManagementClient, vpnGateway; var __frame = { name: "__124", line: 2573 }; return __func(_, this, arguments, __124, 3, __frame, function __$__124() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Connection name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          vpnGateway = new VirtualNetworkGateway(cli, networkManagementClient);
          return vpnGateway.showConnectionSharedKey(resourceGroup, name, options, __cb(_, __frame, 6, 17, function __$__124() { _(); }, true)); }, true)); }, true)); }); });


  var appGateway = network.category("application-gateway").description($("Commands to manage application gateways"));


  appGateway.command("create [resource-group] [name] [location]").description($("Create an application gateway")).usage("[options] <resource-group> <name> <location>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the application gateway")).option("-l, --location <location>", $("the location")).option("-e, --vnet-name <vnet-name>", $("the name of the virtual network application gateway should be deployed in")).option("-m, --subnet-name <subnet-name>", $("the name of subnet in the virtual network identified by --vnet-name")).option("-d, --subnet-id <subnet-id>", util.format($(("the subnet identifier." + "\n     e.g. %s")), constants.help.id.subnet)).option("-y, --cert-file <cert-file>", $("the path to the certificate")).option("-x, --cert-password <cert-password>", $("the certificate password")).option("-r, --servers <servers>", $("comma separated list of IP addresses or DNS names corresponding to backend servers")).option("-i, --http-settings-protocol <http-settings-protocol>", util.format($("the HTTP settings protocol, valid values are [%s]"), constants.appGateway.settings.protocol)).option("-o, --http-settings-port <http-settings-port>", util.format($("the HTTP settings port, valid range is"), utils.toRange(constants.appGateway.settings.port))).option("-f, --http-settings-cookie-based-affinity <http-settings-cookie-based-affinity>", util.format($((("Enable or disable HTTP settings cookie based affinity, valid values are" + "\n     [%s],") + "\n     default value is \"%s\"")), constants.appGateway.settings.affinity, constants.appGateway.settings.affinity[0])).option("-j, --frontend-port <frontend-port>", util.format($("the frontend port value, valid range is"), utils.toRange(constants.appGateway.settings.port))).option("-k, --public-ip-name <public-ip-name>", $("the name of the public ip")).option("-p, --public-ip-id <public-ip-id>", util.format($(("the public ip identifier." + "\n     e.g. %s")), constants.help.id.publicIp)).option("-b, --http-listener-protocol <http-listener-protocol>", util.format($("the HTTP listener protocol, valid values are [%s]"), constants.appGateway.httpListener.protocol)).option("-w, --routing-rule-type <routing-rule-type>", util.format($("the request routing rule type, default is \"%s\""), constants.appGateway.routingRule.type[0])).option("-a, --sku-name <sku-name>", util.format($("the name of the sku, valid values are [%s]. Default values is \"%s\""), constants.appGateway.sku.name, constants.appGateway.sku.name[0])).option("-u, --sku-tier <sku-tier>", util.format($("the sku tier, valid values are [%s]. Default values is \"%s\""), constants.appGateway.sku.name.tier, constants.appGateway.sku.tier[0])).option("-z, --capacity <capacity>", util.format($("application gateway instance count in range [%s]. Default value is %s."), constants.appGateway.sku.capacity, constants.appGateway.sku.capacity[0])).option("-s, --subscription <subscription>", $("the subscription identifier")).option("-t, --tags <tags>", $(constants.help.tags.crate)).execute(function __125(resourceGroup, name, location, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__125", line: 2626 }; return __func(_, this, arguments, __125, 4, __frame, function __$__125() {









































      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Location: "), location, __cb(_, __frame, 3, 33, function ___(__0, __3) { location = __3; return (function __$__125(__then) {

              if ((((options.httpListenerProtocol && (options.httpListenerProtocol.toLowerCase() === constants.appGateway.httpListener.protocol[1].toLowerCase()))) || options.certFile)) {
                return cli.interaction.promptIfNotGiven($("SSL certificate full path: "), options.certFile, __cb(_, __frame, 6, 43, function ___(__0, __4) { options.certFile = __4;
                  return cli.interaction.promptIfNotGiven($("SSL certificate password: "), options.certPassword, __cb(_, __frame, 7, 47, function ___(__0, __5) { options.certPassword = __5; __then(); }, true)); }, true)); } else { __then(); } ; })(function __$__125() { return (function __$__125(__then) {

                if (!options.subnetId) {
                  return cli.interaction.promptIfNotGiven($("Virtual network name: "), options.vnetName, __cb(_, __frame, 10, 43, function ___(__0, __6) { options.vnetName = __6;
                    return cli.interaction.promptIfNotGiven($("Subnet name: "), options.subnetName, __cb(_, __frame, 11, 45, function ___(__0, __7) { options.subnetName = __7; __then(); }, true)); }, true)); } else { __then(); } ; })(function __$__125() {

                return cli.interaction.promptIfNotGiven($("Comma separated backend server IPs: "), options.servers, __cb(_, __frame, 13, 40, function ___(__0, __8) { options.servers = __8;

                  networkManagementClient = getNetworkManagementClient(options);
                  appGateway = new AppGateway(cli, networkManagementClient);
                  return appGateway.create(resourceGroup, name, location, options, __cb(_, __frame, 17, 17, function __$__125() { _(); }, true)); }, true)); }); }); }, true)); }, true)); }, true)); }); });


  appGateway.command("set [resource-group] [name]").description($("Set an application gateway")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the application gateway")).option("-a, --sku-name <sku-name>", util.format($("the name of the sku, valid values are [%s]"), constants.appGateway.sku.name)).option("-u, --sku-tier <sku-tier>", util.format($("the sku tier, valid values are [%s]"), constants.appGateway.sku.tier)).option("-z, --capacity <capacity>", util.format($("application gateway instance count in range [%s]"), constants.appGateway.sku.capacity)).option("-t, --tags [tags]", $(constants.help.tags.set)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __126(resourceGroup, name, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__126", line: 2659 }; return __func(_, this, arguments, __126, 3, __frame, function __$__126() {













      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          appGateway = new AppGateway(cli, networkManagementClient);
          return appGateway.set(resourceGroup, name, options, __cb(_, __frame, 6, 17, function __$__126() { _(); }, true)); }, true)); }, true)); }); });


  appGateway.command("list").description($("List resource group application gateways")).usage("[options]").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __127(resourceGroup, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__127", line: 2673 }; return __func(_, this, arguments, __127, 2, __frame, function __$__127() {





      networkManagementClient = getNetworkManagementClient(options);
      appGateway = new AppGateway(cli, networkManagementClient);
      return appGateway.list(options, __cb(_, __frame, 3, 17, function __$__127() { _(); }, true)); }); });


  appGateway.command("show [resource-group] [name]").description($("Show application gateway")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the application gateway")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __128(resourceGroup, name, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__128", line: 2685 }; return __func(_, this, arguments, __128, 3, __frame, function __$__128() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          appGateway = new AppGateway(cli, networkManagementClient);
          return appGateway.show(resourceGroup, name, options, __cb(_, __frame, 6, 17, function __$__128() { _(); }, true)); }, true)); }, true)); }); });


  appGateway.command("delete [resource-group] [name]").description($("Delete application gateway")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the application gateway")).option("-q, --quiet", $("quiet mode, do not ask for unregister confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __129(resourceGroup, name, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__129", line: 2701 }; return __func(_, this, arguments, __129, 3, __frame, function __$__129() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          appGateway = new AppGateway(cli, networkManagementClient);
          return appGateway.delete(resourceGroup, name, options, __cb(_, __frame, 6, 17, function __$__129() { _(); }, true)); }, true)); }, true)); }); });


  appGateway.command("start [resource-group] [name]").description($("Start application gateway")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the application gateway")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __130(resourceGroup, name, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__130", line: 2716 }; return __func(_, this, arguments, __130, 3, __frame, function __$__130() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          appGateway = new AppGateway(cli, networkManagementClient);
          return appGateway.start(resourceGroup, name, options, __cb(_, __frame, 6, 17, function __$__130() { _(); }, true)); }, true)); }, true)); }); });


  appGateway.command("stop [resource-group] [name]").description($("Stop application gateway")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the application gateway")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __131(resourceGroup, name, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__131", line: 2731 }; return __func(_, this, arguments, __131, 3, __frame, function __$__131() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          appGateway = new AppGateway(cli, networkManagementClient);
          return appGateway.stop(resourceGroup, name, options, __cb(_, __frame, 6, 17, function __$__131() { _(); }, true)); }, true)); }, true)); }); });


  var appGatewaySslCert = appGateway.category("ssl-cert").description($("Commands to manage application gateway SSL certificates"));


  appGatewaySslCert.command("create [resource-group] [gateway-name] [name]").description($("Add application gateway SSL certificate")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the name of the application gateway")).option("-n, --name <name>", $("the name of the certificate")).option("-f, --cert-file <cert-file>", $("the full path to the certificate in pfx format")).option("-p, --cert-password <cert-password>", $("the certificate password")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __132(resourceGroup, gatewayName, name, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__132", line: 2752 }; return __func(_, this, arguments, __132, 4, __frame, function __$__132() {









      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("Certificate name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            return cli.interaction.promptIfNotGiven($("Certificate full file path: "), options.certFile, __cb(_, __frame, 5, 41, function ___(__0, __4) { options.certFile = __4;
              return cli.interaction.promptIfNotGiven($("Certificate password: "), options.certPassword, __cb(_, __frame, 6, 45, function ___(__0, __5) { options.certPassword = __5;

                networkManagementClient = getNetworkManagementClient(options);
                appGateway = new AppGateway(cli, networkManagementClient);
                return appGateway.addSsl(resourceGroup, gatewayName, name, options, __cb(_, __frame, 10, 17, function __$__132() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  appGatewaySslCert.command("delete [resource-group] [gateway-name] [name]").description($("Delete application gateway SSL certificate")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the name of the application gateway")).option("-n, --name <name>", $("the name of the certificate")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __133(resourceGroup, gatewayName, name, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__133", line: 2773 }; return __func(_, this, arguments, __133, 4, __frame, function __$__133() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("Certificate name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            appGateway = new AppGateway(cli, networkManagementClient);
            return appGateway.removeSsl(resourceGroup, gatewayName, name, options, __cb(_, __frame, 7, 17, function __$__133() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var appGatewayFrontendIp = appGateway.category("frontend-ip").description($("Commands to manage application gateway frontend ips"));


  appGatewayFrontendIp.command("create [resource-group] [gateway-name] [name]").description($("Add a frontend ip configuration to an application gateway")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the name of the application gateway")).option("-n, --name <name>", $("the name of the frontend IP address name")).option("-e, --vnet-name <vnet-name>", $("the name of the virtual network")).option("-u, --subnet-name <subnet-name>", $("the name of the subnet")).option("-i, --subnet-id <subnet-id>", $("the id of the subnet")).option("-a, --static-ip-address <static-ip-address>", $("the static IP address name")).option("-p, --public-ip-name <public-ip-name>", $("the name of the public ip name")).option("-r, --public-ip-id <public-ip-id>", util.format($(("the public ip identifier." + "\n     e.g. %s")), constants.help.id.publicIp)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __134(resourceGroup, gatewayName, name, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__134", line: 2800 }; return __func(_, this, arguments, __134, 4, __frame, function __$__134() {














      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("Frontend IP name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3; return (function __$__134(__then) {

              if ((options.vnetName || options.subnetName)) {
                return cli.interaction.promptIfNotGiven($("Virtual network name: "), options.vnetName, __cb(_, __frame, 6, 43, function ___(__0, __4) { options.vnetName = __4;
                  return cli.interaction.promptIfNotGiven($("Subnet name: "), options.subnetName, __cb(_, __frame, 7, 45, function ___(__0, __5) { options.subnetName = __5; __then(); }, true)); }, true)); } else { return (function __$__134(__then) {

                  if ((!options.subnetId && !options.publicIpId)) {
                    return cli.interaction.promptIfNotGiven($("Public IP name: "), options.publicIpName, __cb(_, __frame, 10, 49, function ___(__0, __6) { options.publicIpName = __6; __then(); }, true)); } else { __then(); } ; })(__then); } ; })(function __$__134() {



              networkManagementClient = getNetworkManagementClient(options);
              appGateway = new AppGateway(cli, networkManagementClient);
              return appGateway.addFrontendIp(resourceGroup, gatewayName, name, options, __cb(_, __frame, 16, 17, function __$__134() { _(); }, true)); }); }, true)); }, true)); }, true)); }); });


  appGatewayFrontendIp.command("delete [resource-group] [gateway-name] [name]").description($("Delete a frontend ip configuration from an application gateway")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the name of the application gateway")).option("-n, --name <name>", $("the name of the frontend IP configuration")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __135(resourceGroup, gatewayName, name, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__135", line: 2827 }; return __func(_, this, arguments, __135, 4, __frame, function __$__135() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("Frontend IP name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            appGateway = new AppGateway(cli, networkManagementClient);
            return appGateway.removeFrontendIp(resourceGroup, gatewayName, name, options, __cb(_, __frame, 7, 17, function __$__135() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var appGatewayFrontendPort = appGateway.category("frontend-port").description("Commands to manage application gateway frontend ports");


  appGatewayFrontendPort.command("create [resource-group] [gateway-name] [name]").description($("Add a frontend port to an application gateway")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the name of the application gateway")).option("-n, --name <name>", $("the name of the frontend port")).option("-p, --port <port>", util.format($("the port, valid range is [%s]"), constants.appGateway.settings.port)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __136(resourceGroup, gatewayName, name, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__136", line: 2848 }; return __func(_, this, arguments, __136, 4, __frame, function __$__136() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("Frontend port name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("Frontend port: "), options.port, __cb(_, __frame, 4, 37, function ___(__0, __4) { options.port = __4;

              networkManagementClient = getNetworkManagementClient(options);
              appGateway = new AppGateway(cli, networkManagementClient);
              return appGateway.addFrontendPort(resourceGroup, gatewayName, name, options, __cb(_, __frame, 8, 17, function __$__136() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  appGatewayFrontendPort.command("delete [resource-group] [gateway-name] [name]").description($("Delete a frontend port from an application gateway")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the name of the application gateway")).option("-n, --name <name>", $("the name of the frontend port")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __137(resourceGroup, gatewayName, name, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__137", line: 2867 }; return __func(_, this, arguments, __137, 4, __frame, function __$__137() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("Frontend port name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            appGateway = new AppGateway(cli, networkManagementClient);
            return appGateway.removeFrontendPort(resourceGroup, gatewayName, name, options, __cb(_, __frame, 7, 17, function __$__137() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var appGatewayAddressPool = appGateway.category("address-pool").description($("Commands to manage application gateway backend address pools"));


  appGatewayAddressPool.command("create [resource-group] [gateway-name] [name]").description($("Add a backend address pool to an application gateway")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the name of the application gateway")).option("-n, --name <name>", $("the name of the backend address pool")).option("-r, --servers <servers>", $(("comma separated list of IP addresses or DNS names" + "\n     corresponding to backend servers"))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __138(resourceGroup, gatewayName, name, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__138", line: 2889 }; return __func(_, this, arguments, __138, 4, __frame, function __$__138() {









      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("Backend address pool name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("List of IP addresses or DNS names: "), options.servers, __cb(_, __frame, 4, 40, function ___(__0, __4) { options.servers = __4;

              networkManagementClient = getNetworkManagementClient(options);
              appGateway = new AppGateway(cli, networkManagementClient);
              return appGateway.addBackendAddressPool(resourceGroup, gatewayName, name, options, __cb(_, __frame, 8, 17, function __$__138() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  appGatewayAddressPool.command("delete [resource-group] [gateway-name] [name]").description($("Delete a backend address pool from an application gateway")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the name of the application gateway")).option("-n, --name <name>", $("the name of the backend address pool")).option("-q, --quiet", $("quiet mode, do not ask for unregister confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __139(resourceGroup, gatewayName, name, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__139", line: 2908 }; return __func(_, this, arguments, __139, 4, __frame, function __$__139() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("Backend address pool name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            appGateway = new AppGateway(cli, networkManagementClient);
            return appGateway.removeBackendAddressPool(resourceGroup, gatewayName, name, options, __cb(_, __frame, 7, 17, function __$__139() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var appGatewayHttpSettings = appGateway.category("http-settings").description($("Commands to manage application gateway http settings"));


  appGatewayHttpSettings.command("create [resource-group] [gateway-name] [name]").description($("Add http settings to an application gateway")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the name of the application gateway")).option("-n, --name <name>", $("the name of the HTTP settings")).option("-p, --protocol <protocol>", util.format($("the protocol, valid value is [%s]"), constants.appGateway.settings.protocol)).option("-o, --port <port>", util.format($("the port, valid range is [%s]"), constants.appGateway.settings.port)).option("-c, --cookie-based-affinity <cookie-based-affinity>", util.format($((("enable or disable cookie based affinity, valid values are" + "\n     [%s],") + "\n     default value is [%s]")), constants.appGateway.settings.affinity, constants.appGateway.settings.affinity[0])).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __140(resourceGroup, gatewayName, name, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__140", line: 2936 }; return __func(_, this, arguments, __140, 4, __frame, function __$__140() {















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("Http settings name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("Port: "), options.port, __cb(_, __frame, 4, 37, function ___(__0, __4) { options.port = __4;

              networkManagementClient = getNetworkManagementClient(options);
              appGateway = new AppGateway(cli, networkManagementClient);
              return appGateway.addHttpSettings(resourceGroup, gatewayName, name, options, __cb(_, __frame, 8, 17, function __$__140() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  appGatewayHttpSettings.command("delete [resource-group] [gateway-name] [name]").description($("Delete http settings to an application gateway")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the name of the application gateway")).option("-n, --name <name>", $("the name of the HTTP settings")).option("-q, --quiet", $("quiet mode, do not ask for unregister confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __141(resourceGroup, gatewayName, name, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__141", line: 2955 }; return __func(_, this, arguments, __141, 4, __frame, function __$__141() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("Http settings name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            appGateway = new AppGateway(cli, networkManagementClient);
            return appGateway.removeHttpSettings(resourceGroup, gatewayName, name, options, __cb(_, __frame, 7, 17, function __$__141() { _(); }, true)); }, true)); }, true)); }, true)); }); });



  var appGatewayHttpListener = appGateway.category("http-listener").description("Commands to manage application gateway http listeners");


  appGatewayHttpListener.command("create [resource-group] [gateway-name] [name]").description($("Add an http listener to an application gateway")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the name of the application gateway")).option("-n, --name <name>", $("the name of the HTTP listener")).option("-i, --frontend-ip-name <frontend-ip-name>", $("the name of an existing frontend ip configuration")).option("-p, --frontend-port-name <frontend-port-name>", $("the name of an existing frontend port")).option("-r, --protocol <protocol>", util.format($("the protocol, supported values are [%s]"), constants.appGateway.httpListener.protocol)).option("-c, --ssl-cert <ssl-cert>", util.format($(("the name of an existing SSL certificate." + "\n   This parameter is required when --protocol is Https")))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __142(resourceGroup, gatewayName, name, frontendPortName, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__142", line: 2982 }; return __func(_, this, arguments, __142, 5, __frame, function __$__142() {













      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("The HTTP listener name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("Fronetend IP Configuration name: "), options.frontendIpName, __cb(_, __frame, 4, 47, function ___(__0, __4) { options.frontendIpName = __4;

              return cli.interaction.promptIfNotGiven($("Fronetend port name: "), options.frontendPortName, __cb(_, __frame, 6, 49, function ___(__0, __5) { options.frontendPortName = __5;


                networkManagementClient = getNetworkManagementClient(options);
                appGateway = new AppGateway(cli, networkManagementClient);
                return appGateway.addHttpListener(resourceGroup, gatewayName, name, options, __cb(_, __frame, 11, 17, function __$__142() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  appGatewayHttpListener.command("delete [resource-group] [gateway-name] [name]").description($("Delete an http listener from an application gateway")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the name of the application gateway")).option("-n, --name <name>", $("the name of the HTTP listener")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __143(resourceGroup, gatewayName, name, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__143", line: 3004 }; return __func(_, this, arguments, __143, 4, __frame, function __$__143() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("Frontend port name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            appGateway = new AppGateway(cli, networkManagementClient);
            return appGateway.removeHttpListener(resourceGroup, gatewayName, name, options, __cb(_, __frame, 7, 17, function __$__143() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var appGatewayRoutingRule = appGateway.category("rule").description("Commands to manage application gateway request routing rule");


  appGatewayRoutingRule.command("create [resource-group] [gateway-name] [name]").description($("Add request routing rule to application gateway")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the name of the application gateway")).option("-n, --name <name>", $("the name of the request routing rule")).option("-i, --http-settings-name <http-settings-name>", $("the name of an existing backend HTTP settings")).option("-l, --http-listener-name <http-listener-name>", $("the name of an existing HTTP listener")).option("-p, --address-pool-name <address-pool-name>", $("the name of an existing backend address pool")).option("-t, --type <type>", $("the type, currently supported only default value \"%s\""), constants.appGateway.routingRule.type[0]).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __144(resourceGroup, gatewayName, name, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__144", line: 3028 }; return __func(_, this, arguments, __144, 4, __frame, function __$__144() {











      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("Request routing rule name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("HTTP settings name: "), options.httpSettingsName, __cb(_, __frame, 4, 49, function ___(__0, __4) { options.httpSettingsName = __4;
              return cli.interaction.promptIfNotGiven($("HTTP listener name: "), options.httpListenerName, __cb(_, __frame, 5, 49, function ___(__0, __5) { options.httpListenerName = __5;
                return cli.interaction.promptIfNotGiven($("The address pool name: "), options.addressPoolName, __cb(_, __frame, 6, 48, function ___(__0, __6) { options.addressPoolName = __6;

                  networkManagementClient = getNetworkManagementClient(options);
                  appGateway = new AppGateway(cli, networkManagementClient);
                  return appGateway.addRequestRoutingRule(resourceGroup, gatewayName, name, options, __cb(_, __frame, 10, 17, function __$__144() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  appGatewayRoutingRule.command("delete [resource-group] [gateway-name] [name]").description($("Delete a request routing rule from an application gateway")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the name of the application gateway")).option("-n, --name <name>", $("the name of the request routing rule")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __145(resourceGroup, gatewayName, name, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__145", line: 3049 }; return __func(_, this, arguments, __145, 4, __frame, function __$__145() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("Request routing rule name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            appGateway = new AppGateway(cli, networkManagementClient);
            return appGateway.removeRequestRoutingRule(resourceGroup, gatewayName, name, options, __cb(_, __frame, 7, 17, function __$__145() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var appGatewayProbe = appGateway.category("probe").description("Commands to manage application gateway probes");


  appGatewayProbe.command("create [resource-group] [gateway-name] [name]").description($("Add probe to application gateway")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the name of the application gateway")).option("-n, --name <name>", $("the name of the probe")).option("-o, --port <port>", util.format($("the port, valid range is [%s]"), constants.appGateway.settings.port)).option("-p, --protocol <protocol>", util.format($("the protocol, only valid value is \"%s\""), constants.appGateway.settings.protocol)).option("-d, --host-name <host-name>", util.format($(("the name of host to send probe." + "\n   Default value is \"%s\"")), constants.appGateway.probe.host)).option("-f, --path <path>", util.format($(("the relative path of probe. Valid path starts from \"/\"." + "\n   Probe is sent to ://:. Default value is \"%s\"")), constants.appGateway.probe.path)).option("-i, --interval <interval>", util.format($((("the probe interval in seconds." + "\n   This is the time interval between two consecutive probes.") + "\n   Default value is %s")), constants.appGateway.probe.interval)).option("-u, --timeout <timeout>", util.format($((("the probe timeout in seconds." + "\n   Probe marked as failed if valid response is not received with this timeout period.") + "\n   Default value is %s")), constants.appGateway.probe.timeout)).option("-e, --unhealthy-threshold <unhealthy-threshold>", util.format($((("probe retry count." + "\n   Back end server is marked down after consecutive probe failure count reaches an unhealthy threshold") + "\n   Default value is %s")), constants.appGateway.probe.unhealthyThreshold)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __146(resourceGroup, gatewayName, name, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__146", line: 3085 }; return __func(_, this, arguments, __146, 4, __frame, function __$__146() {























      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("Probe name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            appGateway = new AppGateway(cli, networkManagementClient);
            return appGateway.addProbe(resourceGroup, gatewayName, name, options, __cb(_, __frame, 7, 17, function __$__146() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  appGatewayProbe.command("delete [resource-group] [gateway-name] [name]").description($("Delete a probe from an application gateway")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the name of the application gateway")).option("-n, --name <name>", $("the name of the probe")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __147(resourceGroup, gatewayName, name, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__147", line: 3103 }; return __func(_, this, arguments, __147, 4, __frame, function __$__147() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("Probe name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            appGateway = new AppGateway(cli, networkManagementClient);
            return appGateway.removeProbe(resourceGroup, gatewayName, name, options, __cb(_, __frame, 7, 17, function __$__147() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var appGatewayUrlPathMap = appGateway.category("url-path-map").description("Commands to manage application gateway url path maps");


  appGatewayUrlPathMap.command("create [resource-group] [gateway-name] [name]").description($("Add url path map to application gateway")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the name of the application gateway")).option("-n, --name <name>", $("the name of the url path map")).option("-r, --rule-name <rule-name>", $("the name of the url path map rule")).option("-p, --path <path>", $("path, which specifies application gateway path rule")).option("-i, --http-settings-name <http-settings-name>", $("the name of an existing backend HTTP settings")).option("-a, --address-pool-name <address-pool-name>", $("the name of an existing backend address pool")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __148(resourceGroup, gatewayName, name, ruleName, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__148", line: 3127 }; return __func(_, this, arguments, __148, 5, __frame, function __$__148() {











      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("Url path map name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("Rule name: "), options.ruleName, __cb(_, __frame, 4, 41, function ___(__0, __4) { options.ruleName = __4;
              return cli.interaction.promptIfNotGiven($("Path: "), options.path, __cb(_, __frame, 5, 37, function ___(__0, __5) { options.path = __5;
                return cli.interaction.promptIfNotGiven($("HTTP settings name: "), options.httpSettingsName, __cb(_, __frame, 6, 49, function ___(__0, __6) { options.httpSettingsName = __6;
                  return cli.interaction.promptIfNotGiven($("The address pool name: "), options.addressPoolName, __cb(_, __frame, 7, 48, function ___(__0, __7) { options.addressPoolName = __7;

                    networkManagementClient = getNetworkManagementClient(options);
                    appGateway = new AppGateway(cli, networkManagementClient);
                    return appGateway.addUrlPathMap(resourceGroup, gatewayName, name, options, __cb(_, __frame, 11, 17, function __$__148() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  appGatewayUrlPathMap.command("delete [resource-group] [gateway-name] [name]").description($("Delete an url path map from an application gateway")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the name of the application gateway")).option("-n, --name <name>", $("the name of the url path map")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __149(resourceGroup, gatewayName, name, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__149", line: 3149 }; return __func(_, this, arguments, __149, 4, __frame, function __$__149() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("Url path map name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            appGateway = new AppGateway(cli, networkManagementClient);
            return appGateway.removeUrlPathMap(resourceGroup, gatewayName, name, options, __cb(_, __frame, 7, 17, function __$__149() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var appGateayMapRule = appGatewayUrlPathMap.category("rule").description("Commands to manage application gateway url path map rules");


  appGateayMapRule.command("create [resource-group] [gateway-name] [name]").description($("Add url path map to application gateway")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the name of the application gateway")).option("-u, --url-path-map-name <url-path-map-name>", $("the name of the url path map")).option("-n, --name <name>", $("the name of the url path map rule")).option("-p, --path <path>", $("path, which specifies application gateway path rule")).option("-i, --http-settings-name <http-settings-name>", $("the name of an existing backend HTTP settings")).option("-a, --address-pool-name <address-pool-name>", $("the name of an existing backend address pool")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __150(resourceGroup, gatewayName, name, ruleName, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__150", line: 3173 }; return __func(_, this, arguments, __150, 5, __frame, function __$__150() {











      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("Url path map name: "), options.urlPathMapName, __cb(_, __frame, 3, 47, function ___(__0, __3) { options.urlPathMapName = __3;
            return cli.interaction.promptIfNotGiven($("Rule name: "), name, __cb(_, __frame, 4, 29, function ___(__0, __4) { name = __4;
              return cli.interaction.promptIfNotGiven($("Path: "), options.path, __cb(_, __frame, 5, 37, function ___(__0, __5) { options.path = __5;
                return cli.interaction.promptIfNotGiven($("HTTP settings name: "), options.httpSettingsName, __cb(_, __frame, 6, 49, function ___(__0, __6) { options.httpSettingsName = __6;
                  return cli.interaction.promptIfNotGiven($("The address pool name: "), options.addressPoolName, __cb(_, __frame, 7, 48, function ___(__0, __7) { options.addressPoolName = __7;

                    networkManagementClient = getNetworkManagementClient(options);
                    appGateway = new AppGateway(cli, networkManagementClient);
                    return appGateway.addMapRule(resourceGroup, gatewayName, name, options, __cb(_, __frame, 11, 17, function __$__150() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  appGateayMapRule.command("delete [resource-group] [gateway-name] [name]").description($("Delete an url path map from an application gateway")).usage("[options] <resource-group> <gateway-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-w, --gateway-name <gateway-name>", $("the name of the application gateway")).option("-u, --url-path-map-name <url-path-map-name>", $("the name of the url path map")).option("-n, --name <name>", $("the name of the map rule")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __151(resourceGroup, gatewayName, name, options, _) { var networkManagementClient, appGateway; var __frame = { name: "__151", line: 3196 }; return __func(_, this, arguments, __151, 4, __frame, function __$__151() {









      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Application gateway name: "), gatewayName, __cb(_, __frame, 2, 36, function ___(__0, __2) { gatewayName = __2;
          return cli.interaction.promptIfNotGiven($("Url path map name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            appGateway = new AppGateway(cli, networkManagementClient);
            return appGateway.removeMapRule(resourceGroup, gatewayName, name, options, __cb(_, __frame, 7, 17, function __$__151() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var expressRoute = network.category("express-route").description($("Commands to manage express routes"));


  var expressRouteProvider = expressRoute.category("provider").description($("Commands to manage express route service providers"));


  expressRouteProvider.command("list").description($("List express route service providers")).usage("[options]").option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __152(options, _) { var networkManagementClient, expressRoute; var __frame = { name: "__152", line: 3216 }; return __func(_, this, arguments, __152, 1, __frame, function __$__152() {




      networkManagementClient = getNetworkManagementClient(options);
      expressRoute = new ExpressRoute(cli, networkManagementClient);
      return expressRoute.listProviders(options, __cb(_, __frame, 3, 19, function __$__152() { _(); }, true)); }); });


  var expressRouteCircuit = expressRoute.category("circuit").description($("Commands to manage express routes circuits"));


  expressRouteCircuit.command("create [resource-group] [name] [location]").description($("Create express route circuit")).usage("[options] <resource-group> <name> <location>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the express route circuit")).option("-l, --location <location>", $("the location")).option("-p, --service-provider-name <service-provider-name>", $("the service provider name")).option("-i, --peering-location <peering-location>", $("the service provider peering location")).option("-b, --bandwidth-in-mbps <bandwidth-in-mbps>", $("the bandwidth in Mbps")).option("-e, --sku-tier <sku-tier>", $("the sku tier")).option("-f, --sku-family <sku-family>", $("the sku family")).option("-t, --tags <tags>", $(constants.help.tags.create)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __153(resourceGroup, name, location, options, _) { var networkManagementClient, expressRoute; var __frame = { name: "__153", line: 3238 }; return __func(_, this, arguments, __153, 4, __frame, function __$__153() {













      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Express route name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Location: "), location, __cb(_, __frame, 3, 41, function ___(__0, __3) { options.location = __3;
            return cli.interaction.promptIfNotGiven($("Service provider name: "), options.serviceProviderName, __cb(_, __frame, 4, 52, function ___(__0, __4) { options.serviceProviderName = __4;
              return cli.interaction.promptIfNotGiven($("Peering location: "), options.peeringLocation, __cb(_, __frame, 5, 48, function ___(__0, __5) { options.peeringLocation = __5;

                networkManagementClient = getNetworkManagementClient(options);
                expressRoute = new ExpressRoute(cli, networkManagementClient);
                return expressRoute.createCircuit(resourceGroup, name, options, __cb(_, __frame, 9, 19, function __$__153() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  expressRouteCircuit.command("set [resource-group] [name]").description($("Set an express route circuit")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the express route circuit")).option("-b, --bandwidth-in-mbps <bandwidth-in-mbps>", $("the bandwidth in Mbps")).option("-e, --sku-tier <sku-tier>", $("the sku tier")).option("-f, --sku-family <sku-family>", $("the sku family")).option("-t, --tags [tags]", $(constants.help.tags.set)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __154(resourceGroup, name, options, _) { var networkManagementClient, expressRoute; var __frame = { name: "__154", line: 3260 }; return __func(_, this, arguments, __154, 3, __frame, function __$__154() {










      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Express route name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          expressRoute = new ExpressRoute(cli, networkManagementClient);
          return expressRoute.setCircuit(resourceGroup, name, options, __cb(_, __frame, 6, 19, function __$__154() { _(); }, true)); }, true)); }, true)); }); });


  expressRouteCircuit.command("list [resource-group]").description($("Get all express route circuits")).usage("[options] [resource-group]").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __155(resourceGroup, options, _) { var networkManagementClient, expressRoute; var __frame = { name: "__155", line: 3274 }; return __func(_, this, arguments, __155, 2, __frame, function __$__155() {





      options.resourceGroup = resourceGroup;
      networkManagementClient = getNetworkManagementClient(options);
      expressRoute = new ExpressRoute(cli, networkManagementClient);
      return expressRoute.listCircuits(options, __cb(_, __frame, 4, 19, function __$__155() { _(); }, true)); }); });


  expressRouteCircuit.command("show [resource-group] [name]").description($("Create express route circuit")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the express route circuit")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __156(resourceGroup, name, options, _) { var networkManagementClient, expressRoute; var __frame = { name: "__156", line: 3287 }; return __func(_, this, arguments, __156, 3, __frame, function __$__156() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Express route name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          expressRoute = new ExpressRoute(cli, networkManagementClient);
          return expressRoute.showCircuit(resourceGroup, name, options, __cb(_, __frame, 6, 19, function __$__156() { _(); }, true)); }, true)); }, true)); }); });


  expressRouteCircuit.command("delete [resource-group] [name]").description($("Delete an express route circuit")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the express route circuit")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __157(resourceGroup, name, options, _) { var networkManagementClient, expressRoute; var __frame = { name: "__157", line: 3303 }; return __func(_, this, arguments, __157, 3, __frame, function __$__157() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Express route name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkManagementClient = getNetworkManagementClient(options);
          expressRoute = new ExpressRoute(cli, networkManagementClient);
          return expressRoute.deleteCircuit(resourceGroup, name, options, __cb(_, __frame, 6, 19, function __$__157() { _(); }, true)); }, true)); }, true)); }); });


  var expressRoutePeering = expressRoute.category("peering").description($("Commands to manage express route peerings"));


  expressRoutePeering.command("create [resource-group] [circuit-name] [name]").description($("Create express route peering")).usage("[options] <resource-group> <circuit-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-c, --circuit-name <circuit-name>", $("the name of the express route circuit")).option("-n, --name <name>", $("the name of the express route circuit peering")).option("-y, --type <type>", util.format($(("the express route circuit peering type," + "\n     supported types [%s}")), constants.expressRoute.peering.type)).option("-a, --azure-asn <azure-asn>", $("the express route circuit peering azure ASN")).option("-p, --peer-asn <peer-asn>", $("the express route circuit peering peer ASN")).option("-r, --primary-address-prefix <primary-address-prefix>", $(("the primary address prefix," + "\n     must be valid CIDR format"))).option("-o, --secondary-address-prefix <secondary-address-prefix>", $("the secondary address prefix, must be valid CIDR format")).option("-d, --primary-azure-port <primary-azure-port>", $("the primary azure port")).option("-b, --secondary-azure-port <secondary-azure-port>", $("the secondary azure port")).option("-k, --shared-key <shared-key>", $("the shared key")).option("-i, --vlan-id <vlan-id>", $("the identifier that is used to identify the customer")).option("-f, --ms-advertised-public-prefixes <ms-advertised-public-prefixes>", $("comma separated list of prefixes that will be advertised through the BGP peering")).option("-m, --ms-advertised-public-prefix-state <ms-advertised-public-prefix-state>", util.format($(("specifies the configuration state of the BGP session," + "\n      one of [%s]")), constants.expressRoute.peering.publicPrefixState)).option("-l, --ms-customer-asn <ms-customer-asn>", $("ASN of the customer")).option("-u, --ms-routing-registry-name <ms-routing-registry-name>", util.format($(("Internet Routing Registry / Regional Internet Registry," + "\n     supported values are [%s]")), constants.expressRoute.peering.registryName)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __158(resourceGroup, circuitName, name, options, _) { var networkManagementClient, expressRoute; var __frame = { name: "__158", line: 3339 }; return __func(_, this, arguments, __158, 4, __frame, function __$__158() {
























      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Express route circuit name: "), circuitName, __cb(_, __frame, 2, 36, function ___(__0, __2) { circuitName = __2;
          return cli.interaction.promptIfNotGiven($("Express route peering name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("Primary address prefix: "), options.primaryAddressPrefix, __cb(_, __frame, 4, 53, function ___(__0, __4) { options.primaryAddressPrefix = __4;
              return cli.interaction.promptIfNotGiven($("Secondary address prefix: "), options.secondaryAddressPrefix, __cb(_, __frame, 5, 55, function ___(__0, __5) { options.secondaryAddressPrefix = __5;

                networkManagementClient = getNetworkManagementClient(options);
                expressRoute = new ExpressRoute(cli, networkManagementClient);
                return expressRoute.createPeering(resourceGroup, circuitName, name, options, __cb(_, __frame, 9, 19, function __$__158() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  expressRoutePeering.command("set [resource-group] [circuit-name] [name]").description($("Set express route peering")).usage("[options] <resource-group> <circuit-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-c, --circuit-name <circuit-name>", $("the name of the express route circuit")).option("-n, --name <name>", $("the name of the express route circuit peering")).option("-a, --azure-asn <azure-asn>", $("the express route circuit peering azure ASN")).option("-p, --peer-asn <peer-asn>", $("the express route circuit peering peer ASN")).option("-r, --primary-address-prefix <primary-address-prefix>", $(("the primary address prefix," + "\n     must be valid CIDR format"))).option("-o, --secondary-address-prefix <secondary-address-prefix>", $("the secondary address prefix, must be valid CIDR format")).option("-d, --primary-azure-port <primary-azure-port>", $("the primary azure port")).option("-b, --secondary-azure-port <secondary-azure-port>", $("the secondary azure port")).option("-k, --shared-key <shared-key>", $("the shared key")).option("-i, --vlan-id <vlan-id>", $("the identifier that is used to identify the customer")).option("-f, --ms-advertised-public-prefixes <ms-advertised-public-prefixes>", $("comma separated list of prefixes that will be advertised through the BGP peering")).option("-m, --ms-advertised-public-prefix-state <ms-advertised-public-prefix-state>", util.format($(("specifies the configuration state of the BGP session," + "\n      one of [%s]")), constants.expressRoute.peering.publicPrefixState)).option("-l, --ms-customer-asn <ms-customer-asn>", $("ASN of the customer")).option("-u, --ms-routing-registry-name <ms-routing-registry-name>", util.format($(("Internet Routing Registry / Regional Internet Registry," + "\n     supported values are [%s]")), constants.expressRoute.peering.registryName)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __159(resourceGroup, circuitName, name, options, _) { var networkManagementClient, expressRoute; var __frame = { name: "__159", line: 3373 }; return __func(_, this, arguments, __159, 4, __frame, function __$__159() {






















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Express route circuit name: "), circuitName, __cb(_, __frame, 2, 36, function ___(__0, __2) { circuitName = __2;
          return cli.interaction.promptIfNotGiven($("Express route peering name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            expressRoute = new ExpressRoute(cli, networkManagementClient);
            return expressRoute.setPeering(resourceGroup, circuitName, name, options, __cb(_, __frame, 7, 19, function __$__159() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  expressRoutePeering.command("show [resource-group] [circuit-name] [name]").description($("Get peering details")).usage("[options] <resource-group> <circuit-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-c, --circuit-name <circuit-name>", $("the name of the express route circuit")).option("-n, --name <name>", $("the name of the express route circuit express route peering")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __160(resourceGroup, circuitName, name, options, _) { var networkManagementClient, expressRoute; var __frame = { name: "__160", line: 3390 }; return __func(_, this, arguments, __160, 4, __frame, function __$__160() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Express route circuit name: "), circuitName, __cb(_, __frame, 2, 36, function ___(__0, __2) { circuitName = __2;
          return cli.interaction.promptIfNotGiven($("Express route peering name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            expressRoute = new ExpressRoute(cli, networkManagementClient);
            return expressRoute.showPeering(resourceGroup, circuitName, name, options, __cb(_, __frame, 7, 19, function __$__160() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  expressRoutePeering.command("list [resource-group] [circuit-name]").description($("List Peerings of Express Circuit")).usage("[options] <resource-group> <circuit-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-c, --circuit-name <circuit-name>", $("the name of the express route circuit")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __161(resourceGroup, circuitName, options, _) { var networkResourceProviderClient, expressRoute; var __frame = { name: "__161", line: 3406 }; return __func(_, this, arguments, __161, 3, __frame, function __$__161() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Express route circuit name: "), circuitName, __cb(_, __frame, 2, 36, function ___(__0, __2) { circuitName = __2;

          networkResourceProviderClient = getNetworkManagementClient(options);
          expressRoute = new ExpressRoute(cli, networkResourceProviderClient);
          return expressRoute.listPeering(resourceGroup, circuitName, options, __cb(_, __frame, 6, 19, function __$__161() { _(); }, true)); }, true)); }, true)); }); });


  expressRoutePeering.command("delete [resource-group] [circuit-name] [name]").description($("Delete express route peering")).usage("[options] <resource-group> <circuit-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-c, --circuit-name <circuit-name>", $("the name of the express route circuit")).option("-n, --name <name>", $("the name of the express route circuit express route peering")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __162(resourceGroup, circuitName, name, options, _) { var networkManagementClient, expressRoute; var __frame = { name: "__162", line: 3423 }; return __func(_, this, arguments, __162, 4, __frame, function __$__162() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Express route circuit name: "), circuitName, __cb(_, __frame, 2, 36, function ___(__0, __2) { circuitName = __2;
          return cli.interaction.promptIfNotGiven($("Express route peering name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkManagementClient = getNetworkManagementClient(options);
            expressRoute = new ExpressRoute(cli, networkManagementClient);
            return expressRoute.deletePeering(resourceGroup, circuitName, name, options, __cb(_, __frame, 7, 19, function __$__162() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var expressRouteAuthorization = expressRoute.category("authorization").description($("Commands to manage express routes authorization"));


  expressRouteAuthorization.command("create [resource-group] [circuit-name] [auth-name]").description($("Create express route circuit authorization")).usage("[options] <resource-group> <circuit-name> <auth-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-c, --circuit-name <circuit-name>", $("the name of the express route circuit")).option("-n, --auth-name <auth-name>", $("the name of the express route circuit authorization")).option("-k, --key <key>", $("the express route circuit authorization key")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __163(resourceGroup, circuitName, authName, options, _) { var networkManagementClient, expressRoute; var __frame = { name: "__163", line: 3444 }; return __func(_, this, arguments, __163, 4, __frame, function __$__163() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Express route circuit name: "), circuitName, __cb(_, __frame, 2, 36, function ___(__0, __2) { circuitName = __2;
          return cli.interaction.promptIfNotGiven($("Express route express route authorization name: "), authName, __cb(_, __frame, 3, 33, function ___(__0, __3) { authName = __3;
            return cli.interaction.promptIfNotGiven($("Express route authorization key: "), options.key, __cb(_, __frame, 4, 36, function ___(__0, __4) { options.key = __4;

              networkManagementClient = getNetworkManagementClient(options);
              expressRoute = new ExpressRoute(cli, networkManagementClient);
              return expressRoute.createAuthorization(resourceGroup, circuitName, authName, options, __cb(_, __frame, 8, 19, function __$__163() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  expressRouteAuthorization.command("set [resource-group] [circuit-name] [auth-name]").description($("Set express route circuit authorization")).usage("[options] <resource-group> <circuit-name> <auth-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-c, --circuit-name <circuit-name>", $("the name of the express route circuit")).option("-n, --auth-name <auth-name>", $("the name of the express route circuit authorization")).option("-k, --key <key>", $("the express route circuit authorization key")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __164(resourceGroup, circuitName, authName, options, _) { var networkManagementClient, expressRoute; var __frame = { name: "__164", line: 3463 }; return __func(_, this, arguments, __164, 4, __frame, function __$__164() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Express route circuit name: "), circuitName, __cb(_, __frame, 2, 36, function ___(__0, __2) { circuitName = __2;
          return cli.interaction.promptIfNotGiven($("Express route authorization name: "), authName, __cb(_, __frame, 3, 33, function ___(__0, __3) { authName = __3;

            networkManagementClient = getNetworkManagementClient(options);
            expressRoute = new ExpressRoute(cli, networkManagementClient);
            return expressRoute.setAuthorization(resourceGroup, circuitName, authName, options, __cb(_, __frame, 7, 19, function __$__164() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  expressRouteAuthorization.command("show [resource-group] [circuit-name] [auth-name]").description($("Show express route circuit authorization")).usage("[options] <resource-group> <circuit-name> <auth-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-c, --circuit-name <circuit-name>", $("the name of the express route circuit")).option("-n, --auth-name <auth-name>", $("the name of the express route circuit express route authorization")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __165(resourceGroup, circuitName, authName, options, _) { var networkManagementClient, expressRoute; var __frame = { name: "__165", line: 3480 }; return __func(_, this, arguments, __165, 4, __frame, function __$__165() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Express route circuit name: "), circuitName, __cb(_, __frame, 2, 36, function ___(__0, __2) { circuitName = __2;
          return cli.interaction.promptIfNotGiven($("Express route authorization name: "), authName, __cb(_, __frame, 3, 33, function ___(__0, __3) { authName = __3;

            networkManagementClient = getNetworkManagementClient(options);
            expressRoute = new ExpressRoute(cli, networkManagementClient);
            return expressRoute.showAuthorization(resourceGroup, circuitName, authName, options, __cb(_, __frame, 7, 19, function __$__165() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  expressRouteAuthorization.command("delete [resource-group] [circuit-name] [auth-name]").description($("Delete express route circuit authorization")).usage("[options] <resource-group> <circuit-name> <auth-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-c, --circuit-name <circuit-name>", $("the name of the express route circuit")).option("-n, --auth-name <auth-name>", $("the name of the express route circuit express route authorization")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __166(resourceGroup, circuitName, authName, options, _) { var networkManagementClient, expressRoute; var __frame = { name: "__166", line: 3498 }; return __func(_, this, arguments, __166, 4, __frame, function __$__166() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Express route circuit name: "), circuitName, __cb(_, __frame, 2, 36, function ___(__0, __2) { circuitName = __2;
          return cli.interaction.promptIfNotGiven($("Express route express route authorization name: "), authName, __cb(_, __frame, 3, 33, function ___(__0, __3) { authName = __3;

            networkManagementClient = getNetworkManagementClient(options);
            expressRoute = new ExpressRoute(cli, networkManagementClient);
            return expressRoute.deleteAuthorization(resourceGroup, circuitName, authName, options, __cb(_, __frame, 7, 19, function __$__166() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  expressRouteAuthorization.command("list [resource-group] [circuit-name]").description($("Get all express route circuit authorizations")).usage("[options] <resource-group> <circuit-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-c, --circuit-name <circuit-name>", $("the name of the express route circuit")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __167(resourceGroup, circuitName, options, _) { var networkManagementClient, expressRoute; var __frame = { name: "__167", line: 3514 }; return __func(_, this, arguments, __167, 3, __frame, function __$__167() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Express route circuit name: "), circuitName, __cb(_, __frame, 2, 36, function ___(__0, __2) { circuitName = __2;

          networkManagementClient = getNetworkManagementClient(options);
          expressRoute = new ExpressRoute(cli, networkManagementClient);
          return expressRoute.listAuthorization(resourceGroup, circuitName, options, __cb(_, __frame, 6, 19, function __$__167() { _(); }, true)); }, true)); }, true)); }); });


  function getNetworkManagementClient(options) {
    var subscription = profile.current.getSubscription(options.subscription);
    return utils.createNetworkManagementClient(subscription); };


  function getTrafficManagementClient(options) {
    var subscription = profile.current.getSubscription(options.subscription);
    return utils.createTrafficManagerResourceProviderClient(subscription); };


  function getDnsManagementClient(options) {
    var subscription = profile.current.getSubscription(options.subscription);
    return utils.createDnsResourceProviderClient(subscription); };};
