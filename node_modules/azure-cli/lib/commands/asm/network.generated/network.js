/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb; var profile = require("../../../util/profile");





































var utils = require("../../../util/utils");

var $ = utils.getLocaleString;exports.init = function(cli) {





  var networkAbortMigration = cli.category("network").description("Commands to migrate resources to ARM.").category("vnet").description($("Commands to manage your network.  "));

  networkAbortMigration.command("abort-migration [name]").description($("Abort IaaS Classic to ARM migration for a virtual network.")).usage("[options] <name>").option("-n, --name <name>", $("name")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __1(name, options, _) { var subscription, networkManagementClient, result; var __frame = { name: "__1", line: 54 }; return __func(_, this, arguments, __1, 2, __frame, function __$__1() { return (function __$__1(__then) {





        if (!name) {
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 2, 29, function ___(__0, __1) { name = __1; __then(); }, true)); } else { __then(); } ; })(function __$__1() {


        cli.output.verbose(("name = " + name));
        subscription = profile.current.getSubscription(options.subscription);
        networkManagementClient = utils.createNetworkClient(subscription);
        return networkManagementClient.networks.abortMigration(name, __cb(_, __frame, 8, 50, function ___(__0, __2) { result = __2;
          if (result) {
            cli.output.json(result); } ; _(); }, true)); }); }); });






  var networkCommitMigration = cli.category("network").description("Commands to migrate resources to ARM.").category("vnet").description($("Commands to manage your network.  "));

  networkCommitMigration.command("commit-migration [name]").description($("Commit IaaS Classic to ARM migration for a virtual network.")).usage("[options] <name>").option("-n, --name <name>", $("name")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __2(name, options, _) { var subscription, networkManagementClient, result; var __frame = { name: "__2", line: 78 }; return __func(_, this, arguments, __2, 2, __frame, function __$__2() { return (function __$__2(__then) {





        if (!name) {
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 2, 29, function ___(__0, __1) { name = __1; __then(); }, true)); } else { __then(); } ; })(function __$__2() {


        cli.output.verbose(("name = " + name));
        subscription = profile.current.getSubscription(options.subscription);
        networkManagementClient = utils.createNetworkClient(subscription);
        return networkManagementClient.networks.commitMigration(name, __cb(_, __frame, 8, 50, function ___(__0, __2) { result = __2;
          if (result) {
            cli.output.json(result); } ; _(); }, true)); }); }); });






  var networkPrepareMigration = cli.category("network").description("Commands to migrate resources to ARM.").category("vnet").description($("Commands to manage your network.  "));

  networkPrepareMigration.command("prepare-migration [name]").description($("Prepare IaaS Classic to ARM migration for a virtual network.")).usage("[options] <name>").option("-n, --name <name>", $("name")).option("-s, --subscription <subscription>", $("The subscription identifier")).execute(function __3(name, options, _) { var subscription, networkManagementClient, result; var __frame = { name: "__3", line: 102 }; return __func(_, this, arguments, __3, 2, __frame, function __$__3() { return (function __$__3(__then) {





        if (!name) {
          return cli.interaction.promptIfNotGiven($("name : "), name, __cb(_, __frame, 2, 29, function ___(__0, __1) { name = __1; __then(); }, true)); } else { __then(); } ; })(function __$__3() {


        cli.output.verbose(("name = " + name));
        subscription = profile.current.getSubscription(options.subscription);
        networkManagementClient = utils.createNetworkClient(subscription);
        return networkManagementClient.networks.prepareMigration(name, __cb(_, __frame, 8, 50, function ___(__0, __2) { result = __2;
          if (result) {
            cli.output.json(result); } ; _(); }, true)); }); }); });};
